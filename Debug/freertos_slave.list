
freertos_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075f8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800784c  0800784c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  0800784c  0800784c  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800784c  0800784c  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800784c  0800784c  0001784c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007850  08007850  00017850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08007854  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b0  2**0
                  CONTENTS
 10 .bss          00001b0c  200000b0  200000b0  000200b0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20001bbc  20001bbc  000200b0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b2fa  00000000  00000000  00020123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b6a  00000000  00000000  0003b41d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016a8  00000000  00000000  0003ef88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011a1  00000000  00000000  00040630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002338d  00000000  00000000  000417d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bffd  00000000  00000000  00064b5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e3319  00000000  00000000  00080b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005f54  00000000  00000000  00163e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00169dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007780 	.word	0x08007780

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08007780 	.word	0x08007780

080001e0 <crc_xor>:
uint64_t crc_key = 0xD;

/**
 * XOR logic used to divide data by key
 */
uint64_t crc_xor(uint64_t div_data){
 80001e0:	b4b0      	push	{r4, r5, r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	e9c7 0100 	strd	r0, r1, [r7]
	uint64_t ans = div_data;
 80001ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80001ee:	e9c7 0102 	strd	r0, r1, [r7, #8]
	if(ans & 0b1000){
 80001f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80001f6:	f000 0208 	and.w	r2, r0, #8
 80001fa:	2300      	movs	r3, #0
 80001fc:	4313      	orrs	r3, r2
 80001fe:	d00a      	beq.n	8000216 <crc_xor+0x36>
		ans = ans ^ crc_key;		//if leftmost bit is 1, perform xor with key
 8000200:	4b09      	ldr	r3, [pc, #36]	; (8000228 <crc_xor+0x48>)
 8000202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800020a:	ea80 0402 	eor.w	r4, r0, r2
 800020e:	ea81 0503 	eor.w	r5, r1, r3
 8000212:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}else{
		ans = ans ^ 0b0000;			//if leftmost bit is 0, perform xor with all zeros
	}
	return ans;
 8000216:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800021a:	4610      	mov	r0, r2
 800021c:	4619      	mov	r1, r3
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bcb0      	pop	{r4, r5, r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000

0800022c <crc_division>:
/**
 * divides data by key to get remainder
 *
 * takes 4 bits at a time and XORs them until 4 bit remainder is left
 */
uint64_t crc_division(uint64_t data, int curs_pos, int shift_pos, uint64_t answer){
 800022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000230:	b08f      	sub	sp, #60	; 0x3c
 8000232:	af00      	add	r7, sp, #0
 8000234:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8000238:	617a      	str	r2, [r7, #20]
 800023a:	613b      	str	r3, [r7, #16]
	int cursor = curs_pos;
 800023c:	697b      	ldr	r3, [r7, #20]
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
	int bit_shift = shift_pos;
 8000240:	693b      	ldr	r3, [r7, #16]
 8000242:	633b      	str	r3, [r7, #48]	; 0x30
	uint64_t remain = answer;
 8000244:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000248:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	uint64_t dividend = 0;
 800024c:	f04f 0200 	mov.w	r2, #0
 8000250:	f04f 0300 	mov.w	r3, #0
 8000254:	e9c7 2308 	strd	r2, r3, [r7, #32]

	while(bit_shift > 0){
 8000258:	e057      	b.n	800030a <crc_division+0xde>
		bit_shift--;
 800025a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800025c:	3b01      	subs	r3, #1
 800025e:	633b      	str	r3, [r7, #48]	; 0x30
		dividend = data & (0x0800000000000000 >> cursor);
 8000260:	f04f 0200 	mov.w	r2, #0
 8000264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000268:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800026a:	f1c0 0120 	rsb	r1, r0, #32
 800026e:	f1b0 0420 	subs.w	r4, r0, #32
 8000272:	fa22 fa00 	lsr.w	sl, r2, r0
 8000276:	fa03 f101 	lsl.w	r1, r3, r1
 800027a:	ea4a 0a01 	orr.w	sl, sl, r1
 800027e:	d403      	bmi.n	8000288 <crc_division+0x5c>
 8000280:	fa43 f404 	asr.w	r4, r3, r4
 8000284:	ea4a 0a04 	orr.w	sl, sl, r4
 8000288:	fa43 fb00 	asr.w	fp, r3, r0
 800028c:	4650      	mov	r0, sl
 800028e:	4659      	mov	r1, fp
 8000290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000294:	ea02 0500 	and.w	r5, r2, r0
 8000298:	ea03 0601 	and.w	r6, r3, r1
 800029c:	e9c7 5608 	strd	r5, r6, [r7, #32]
		dividend = dividend >> bit_shift;
 80002a0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80002a6:	f1c0 0420 	rsb	r4, r0, #32
 80002aa:	f1a0 0120 	sub.w	r1, r0, #32
 80002ae:	fa22 f800 	lsr.w	r8, r2, r0
 80002b2:	fa03 f404 	lsl.w	r4, r3, r4
 80002b6:	ea48 0804 	orr.w	r8, r8, r4
 80002ba:	fa23 f101 	lsr.w	r1, r3, r1
 80002be:	ea48 0801 	orr.w	r8, r8, r1
 80002c2:	fa23 f900 	lsr.w	r9, r3, r0
 80002c6:	e9c7 8908 	strd	r8, r9, [r7, #32]
		remain = remain << 1;
 80002ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80002ce:	1891      	adds	r1, r2, r2
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	415b      	adcs	r3, r3
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80002da:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain += dividend;
 80002de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80002e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80002e6:	1884      	adds	r4, r0, r2
 80002e8:	603c      	str	r4, [r7, #0]
 80002ea:	eb41 0303 	adc.w	r3, r1, r3
 80002ee:	607b      	str	r3, [r7, #4]
 80002f0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80002f4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		remain = crc_xor(remain);
 80002f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80002fc:	f7ff ff70 	bl	80001e0 <crc_xor>
 8000300:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
		cursor++;
 8000304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000306:	3301      	adds	r3, #1
 8000308:	637b      	str	r3, [r7, #52]	; 0x34
	while(bit_shift > 0){
 800030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800030c:	2b00      	cmp	r3, #0
 800030e:	dca4      	bgt.n	800025a <crc_division+0x2e>
	}
	return remain;
 8000310:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
 8000314:	4610      	mov	r0, r2
 8000316:	4619      	mov	r1, r3
 8000318:	373c      	adds	r7, #60	; 0x3c
 800031a:	46bd      	mov	sp, r7
 800031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <__NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034a:	2b00      	cmp	r3, #0
 800034c:	db0b      	blt.n	8000366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 021f 	and.w	r2, r3, #31
 8000354:	4907      	ldr	r1, [pc, #28]	; (8000374 <__NVIC_EnableIRQ+0x38>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	095b      	lsrs	r3, r3, #5
 800035c:	2001      	movs	r0, #1
 800035e:	fa00 f202 	lsl.w	r2, r0, r2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	e000e100 	.word	0xe000e100

08000378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000378:	b480      	push	{r7}
 800037a:	b083      	sub	sp, #12
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	6039      	str	r1, [r7, #0]
 8000382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000388:	2b00      	cmp	r3, #0
 800038a:	db0a      	blt.n	80003a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	683b      	ldr	r3, [r7, #0]
 800038e:	b2da      	uxtb	r2, r3
 8000390:	490c      	ldr	r1, [pc, #48]	; (80003c4 <__NVIC_SetPriority+0x4c>)
 8000392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000396:	0112      	lsls	r2, r2, #4
 8000398:	b2d2      	uxtb	r2, r2
 800039a:	440b      	add	r3, r1
 800039c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003a0:	e00a      	b.n	80003b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	683b      	ldr	r3, [r7, #0]
 80003a4:	b2da      	uxtb	r2, r3
 80003a6:	4908      	ldr	r1, [pc, #32]	; (80003c8 <__NVIC_SetPriority+0x50>)
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	f003 030f 	and.w	r3, r3, #15
 80003ae:	3b04      	subs	r3, #4
 80003b0:	0112      	lsls	r2, r2, #4
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	440b      	add	r3, r1
 80003b6:	761a      	strb	r2, [r3, #24]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr
 80003c4:	e000e100 	.word	0xe000e100
 80003c8:	e000ed00 	.word	0xe000ed00

080003cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b089      	sub	sp, #36	; 0x24
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	60f8      	str	r0, [r7, #12]
 80003d4:	60b9      	str	r1, [r7, #8]
 80003d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	f003 0307 	and.w	r3, r3, #7
 80003de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003e0:	69fb      	ldr	r3, [r7, #28]
 80003e2:	f1c3 0307 	rsb	r3, r3, #7
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	bf28      	it	cs
 80003ea:	2304      	movcs	r3, #4
 80003ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	3304      	adds	r3, #4
 80003f2:	2b06      	cmp	r3, #6
 80003f4:	d902      	bls.n	80003fc <NVIC_EncodePriority+0x30>
 80003f6:	69fb      	ldr	r3, [r7, #28]
 80003f8:	3b03      	subs	r3, #3
 80003fa:	e000      	b.n	80003fe <NVIC_EncodePriority+0x32>
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000400:	f04f 32ff 	mov.w	r2, #4294967295
 8000404:	69bb      	ldr	r3, [r7, #24]
 8000406:	fa02 f303 	lsl.w	r3, r2, r3
 800040a:	43da      	mvns	r2, r3
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	401a      	ands	r2, r3
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000414:	f04f 31ff 	mov.w	r1, #4294967295
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	43d9      	mvns	r1, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000424:	4313      	orrs	r3, r2
         );
}
 8000426:	4618      	mov	r0, r3
 8000428:	3724      	adds	r7, #36	; 0x24
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f043 0201 	orr.w	r2, r3, #1
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	601a      	str	r2, [r3, #0]
}
 8000446:	bf00      	nop
 8000448:	370c      	adds	r7, #12
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f023 0201 	bic.w	r2, r3, #1
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr

08000472 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	601a      	str	r2, [r3, #0]
}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8000492:	b480      	push	{r7}
 8000494:	b083      	sub	sp, #12
 8000496:	af00      	add	r7, sp, #0
 8000498:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f06f 0201 	mvn.w	r2, #1
 80004a0:	611a      	str	r2, [r3, #16]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b083      	sub	sp, #12
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	691b      	ldr	r3, [r3, #16]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d101      	bne.n	80004c6 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80004c2:	2301      	movs	r3, #1
 80004c4:	e000      	b.n	80004c8 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80004c6:	2300      	movs	r3, #0
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr

080004d4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f043 0201 	orr.w	r2, r3, #1
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	615a      	str	r2, [r3, #20]
}
 80004e8:	bf00      	nop
 80004ea:	370c      	adds	r7, #12
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <LL_APB2_GRP1_EnableClock+0x2c>)
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	4907      	ldr	r1, [pc, #28]	; (8000520 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4313      	orrs	r3, r2
 8000506:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <LL_APB2_GRP1_EnableClock+0x2c>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4013      	ands	r3, r2
 8000510:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	40021000 	.word	0x40021000

08000524 <HAL_UARTEx_RxEventCallback>:

/**
 * receives data with crc from transmitter every 10ms
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 8000530:	2218      	movs	r2, #24
 8000532:	4905      	ldr	r1, [pc, #20]	; (8000548 <HAL_UARTEx_RxEventCallback+0x24>)
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <HAL_UARTEx_RxEventCallback+0x28>)
 8000536:	f004 faad 	bl	8004a94 <HAL_UARTEx_ReceiveToIdle_IT>
	rx_flag = true;
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_UARTEx_RxEventCallback+0x2c>)
 800053c:	2201      	movs	r2, #1
 800053e:	701a      	strb	r2, [r3, #0]
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200001f8 	.word	0x200001f8
 800054c:	200000cc 	.word	0x200000cc
 8000550:	20000210 	.word	0x20000210

08000554 <crc_decode>:

/**
 * decodes crc value and if the remainder is not zero, track an error in the data sent
 */
void crc_decode(){
 8000554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000556:	b08d      	sub	sp, #52	; 0x34
 8000558:	af02      	add	r7, sp, #8
	rx_flag = false;
 800055a:	4c29      	ldr	r4, [pc, #164]	; (8000600 <crc_decode+0xac>)
 800055c:	2500      	movs	r5, #0
 800055e:	7025      	strb	r5, [r4, #0]
	int shift = 60;
 8000560:	243c      	movs	r4, #60	; 0x3c
 8000562:	627c      	str	r4, [r7, #36]	; 0x24
	int position = 0;
 8000564:	2400      	movs	r4, #0
 8000566:	623c      	str	r4, [r7, #32]
	uint64_t appended_data = RxData[1];
 8000568:	4c26      	ldr	r4, [pc, #152]	; (8000604 <crc_decode+0xb0>)
 800056a:	e9d4 4502 	ldrd	r4, r5, [r4, #8]
 800056e:	e9c7 4506 	strd	r4, r5, [r7, #24]
	uint64_t dividend = appended_data & 0xF000000000000000;
 8000572:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000576:	2000      	movs	r0, #0
 8000578:	f005 4170 	and.w	r1, r5, #4026531840	; 0xf0000000
 800057c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	dividend = dividend >> shift;
 8000580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000584:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000586:	f1c4 0620 	rsb	r6, r4, #32
 800058a:	f1a4 0520 	sub.w	r5, r4, #32
 800058e:	fa20 f204 	lsr.w	r2, r0, r4
 8000592:	fa01 f606 	lsl.w	r6, r1, r6
 8000596:	4332      	orrs	r2, r6
 8000598:	fa21 f505 	lsr.w	r5, r1, r5
 800059c:	432a      	orrs	r2, r5
 800059e:	fa21 f304 	lsr.w	r3, r1, r4
 80005a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint64_t ans = crc_xor(dividend);
 80005a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005aa:	f7ff fe19 	bl	80001e0 <crc_xor>
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

	uint64_t remain = crc_division(appended_data, position, shift, ans);
 80005b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80005b6:	e9cd 2300 	strd	r2, r3, [sp]
 80005ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005bc:	6a3a      	ldr	r2, [r7, #32]
 80005be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80005c2:	f7ff fe33 	bl	800022c <crc_division>
 80005c6:	e9c7 0100 	strd	r0, r1, [r7]
	if(remain != 0){
 80005ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80005ce:	4313      	orrs	r3, r2
 80005d0:	d012      	beq.n	80005f8 <crc_decode+0xa4>
		errors++;
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <crc_decode+0xb4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	3301      	adds	r3, #1
 80005d8:	b2da      	uxtb	r2, r3
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <crc_decode+0xb4>)
 80005dc:	701a      	strb	r2, [r3, #0]
		if(!error_flag){
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <crc_decode+0xb8>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	f083 0301 	eor.w	r3, r3, #1
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <crc_decode+0xa4>
			LL_TIM_EnableCounter(TIM16);
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <crc_decode+0xbc>)
 80005ee:	f7ff ff20 	bl	8000432 <LL_TIM_EnableCounter>
			error_flag = true;
 80005f2:	4b06      	ldr	r3, [pc, #24]	; (800060c <crc_decode+0xb8>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005f8:	bf00      	nop
 80005fa:	372c      	adds	r7, #44	; 0x2c
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000600:	20000210 	.word	0x20000210
 8000604:	200001f8 	.word	0x200001f8
 8000608:	20000211 	.word	0x20000211
 800060c:	20000213 	.word	0x20000213
 8000610:	40014400 	.word	0x40014400

08000614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f000 fcdc 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f83a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f988 	bl	8000934 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000624:	f000 f936 	bl	8000894 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000628:	f000 f904 	bl	8000834 <MX_USART1_UART_Init>
  MX_TIM16_Init();
 800062c:	f000 f88c 	bl	8000748 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000630:	f000 f8c8 	bl	80007c4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
	LL_TIM_EnableCounter(TIM17);
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x5c>)
 8000636:	f7ff fefc 	bl	8000432 <LL_TIM_EnableCounter>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, (uint8_t*)RxData, sizeof(RxData));
 800063a:	2218      	movs	r2, #24
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <main+0x60>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <main+0x64>)
 8000640:	f004 fa28 	bl	8004a94 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000644:	f004 fb80 	bl	8004d48 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of toggle_relays */
  toggle_relaysHandle = osThreadNew(StartRelays01, NULL, &toggle_relays_attributes);
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <main+0x68>)
 800064a:	2100      	movs	r1, #0
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <main+0x6c>)
 800064e:	f004 fbe3 	bl	8004e18 <osThreadNew>
 8000652:	4603      	mov	r3, r0
 8000654:	4a0b      	ldr	r2, [pc, #44]	; (8000684 <main+0x70>)
 8000656:	6013      	str	r3, [r2, #0]

  /* creation of watchdog */
  watchdogHandle = osThreadNew(StartWatchdog02, NULL, &watchdog_attributes);
 8000658:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <main+0x74>)
 800065a:	2100      	movs	r1, #0
 800065c:	480b      	ldr	r0, [pc, #44]	; (800068c <main+0x78>)
 800065e:	f004 fbdb 	bl	8004e18 <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a0a      	ldr	r2, [pc, #40]	; (8000690 <main+0x7c>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f004 fba2 	bl	8004db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x58>
 800066e:	bf00      	nop
 8000670:	40014800 	.word	0x40014800
 8000674:	200001f8 	.word	0x200001f8
 8000678:	200000cc 	.word	0x200000cc
 800067c:	080077cc 	.word	0x080077cc
 8000680:	080009f9 	.word	0x080009f9
 8000684:	200001f0 	.word	0x200001f0
 8000688:	080077f0 	.word	0x080077f0
 800068c:	08000bd5 	.word	0x08000bd5
 8000690:	200001f4 	.word	0x200001f4

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b0a6      	sub	sp, #152	; 0x98
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800069e:	2228      	movs	r2, #40	; 0x28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 f832 	bl	800770c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2258      	movs	r2, #88	; 0x58
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f007 f824 	bl	800770c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 ffab 	bl	8001638 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006e8:	f000 faaa 	bl	8000c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000700:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 ffea 	bl	80026e0 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000712:	f000 fa95 	bl	8000c40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <SystemClock_Config+0xb0>)
 8000718:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000722:	2300      	movs	r3, #0
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8000726:	2300      	movs	r3, #0
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fa3f 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000738:	f000 fa82 	bl	8000c40 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3798      	adds	r7, #152	; 0x98
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	01800003 	.word	0x01800003

08000748 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_Init 0 */
	//f = 8Mhz / PSC				PSC = 615
	//T = (1 / f) * period = 5s		Period = 64934
  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 800075c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000760:	f7ff fec8 	bl	80004f4 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8000764:	f7ff fddc 	bl	8000320 <__NVIC_GetPriorityGrouping>
 8000768:	4603      	mov	r3, r0
 800076a:	2200      	movs	r2, #0
 800076c:	2105      	movs	r1, #5
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fe2c 	bl	80003cc <NVIC_EncodePriority>
 8000774:	4603      	mov	r3, r0
 8000776:	4619      	mov	r1, r3
 8000778:	2019      	movs	r0, #25
 800077a:	f7ff fdfd 	bl	8000378 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800077e:	2019      	movs	r0, #25
 8000780:	f7ff fddc 	bl	800033c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 615;
 8000784:	f240 2367 	movw	r3, #615	; 0x267
 8000788:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 64934;
 800078e:	f64f 53a6 	movw	r3, #64934	; 0xfda6
 8000792:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000794:	2300      	movs	r3, #0
 8000796:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 800079c:	1d3b      	adds	r3, r7, #4
 800079e:	4619      	mov	r1, r3
 80007a0:	4807      	ldr	r0, [pc, #28]	; (80007c0 <MX_TIM16_Init+0x78>)
 80007a2:	f004 fa39 	bl	8004c18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_TIM16_Init+0x78>)
 80007a8:	f7ff fe63 	bl	8000472 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */
	LL_TIM_GenerateEvent_UPDATE(TIM16);
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_TIM16_Init+0x78>)
 80007ae:	f7ff fe91 	bl	80004d4 <LL_TIM_GenerateEvent_UPDATE>

	LL_TIM_ClearFlag_UPDATE(TIM16);
 80007b2:	4803      	ldr	r0, [pc, #12]	; (80007c0 <MX_TIM16_Init+0x78>)
 80007b4:	f7ff fe6d 	bl	8000492 <LL_TIM_ClearFlag_UPDATE>
  /* USER CODE END TIM16_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40014400 	.word	0x40014400

080007c4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_Init 0 */
	//f = 8MHz / PSC					PSC = 367
	//T = (1 / f) * period = 3s			Period = 65216
  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM17);
 80007d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80007dc:	f7ff fe8a 	bl	80004f4 <LL_APB2_GRP1_EnableClock>

  /* TIM17 interrupt Init */
  NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80007e0:	f7ff fd9e 	bl	8000320 <__NVIC_GetPriorityGrouping>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2200      	movs	r2, #0
 80007e8:	2105      	movs	r1, #5
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff fdee 	bl	80003cc <NVIC_EncodePriority>
 80007f0:	4603      	mov	r3, r0
 80007f2:	4619      	mov	r1, r3
 80007f4:	201a      	movs	r0, #26
 80007f6:	f7ff fdbf 	bl	8000378 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80007fa:	201a      	movs	r0, #26
 80007fc:	f7ff fd9e 	bl	800033c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 367;
 8000800:	f240 136f 	movw	r3, #367	; 0x16f
 8000804:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65216;
 800080a:	f64f 63c0 	movw	r3, #65216	; 0xfec0
 800080e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4619      	mov	r1, r3
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_TIM17_Init+0x6c>)
 800081e:	f004 f9fb 	bl	8004c18 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM17);
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM17_Init+0x6c>)
 8000824:	f7ff fe25 	bl	8000472 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40014800 	.word	0x40014800

08000834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART1_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART1_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART1_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART1_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART1_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART1_UART_Init+0x58>)
 8000878:	f002 fe8e 	bl	8003598 <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f9dd 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000cc 	.word	0x200000cc
 8000890:	40013800 	.word	0x40013800

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USART2_UART_Init+0x58>)
 800089a:	4a15      	ldr	r2, [pc, #84]	; (80008f0 <MX_USART2_UART_Init+0x5c>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x58>)
 80008d8:	f002 fe5e 	bl	8003598 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f9ad 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000154 	.word	0x20000154
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_WWDG_Init>:
  * @brief WWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_WWDG_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */
	//5-15ms window
  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_WWDG_Init+0x38>)
 80008fa:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <MX_WWDG_Init+0x3c>)
 80008fc:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_4;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_WWDG_Init+0x38>)
 8000900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000904:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 70;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_WWDG_Init+0x38>)
 8000908:	2246      	movs	r2, #70	; 0x46
 800090a:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 72;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_WWDG_Init+0x38>)
 800090e:	2248      	movs	r2, #72	; 0x48
 8000910:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_WWDG_Init+0x38>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_WWDG_Init+0x38>)
 800091a:	f004 f90f 	bl	8004b3c <HAL_WWDG_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_WWDG_Init+0x34>
  {
    Error_Handler();
 8000924:	f000 f98c 	bl	8000c40 <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001dc 	.word	0x200001dc
 8000930:	40002c00 	.word	0x40002c00

08000934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_GPIO_Init+0xb8>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a27      	ldr	r2, [pc, #156]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b22      	ldr	r3, [pc, #136]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a21      	ldr	r2, [pc, #132]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_GPIO_Init+0xb8>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_GPIO_Init+0xb8>)
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8000992:	2201      	movs	r2, #1
 8000994:	210c      	movs	r1, #12
 8000996:	4816      	ldr	r0, [pc, #88]	; (80009f0 <MX_GPIO_Init+0xbc>)
 8000998:	f000 fe36 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <MX_GPIO_Init+0xc0>)
 80009a4:	f000 fe30 	bl	8001608 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009a8:	230c      	movs	r3, #12
 80009aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ac:	2301      	movs	r3, #1
 80009ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4619      	mov	r1, r3
 80009be:	480c      	ldr	r0, [pc, #48]	; (80009f0 <MX_GPIO_Init+0xbc>)
 80009c0:	f000 fc98 	bl	80012f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80009c4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80009c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 030c 	add.w	r3, r7, #12
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_GPIO_Init+0xc0>)
 80009de:	f000 fc89 	bl	80012f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000800 	.word	0x48000800
 80009f4:	48000400 	.word	0x48000400

080009f8 <StartRelays01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartRelays01 */
void StartRelays01(void *argument)
{
 80009f8:	b5b0      	push	{r4, r5, r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
		//relay logic
		if(rx_flag){
 8000a00:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <StartRelays01+0x190>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 80a0 	beq.w	8000b4a <StartRelays01+0x152>
			if(timer_flag){
 8000a0a:	4b60      	ldr	r3, [pc, #384]	; (8000b8c <StartRelays01+0x194>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <StartRelays01+0x20>
				HAL_WWDG_Refresh(&hwwdg);		//receiving timeout
 8000a12:	485f      	ldr	r0, [pc, #380]	; (8000b90 <StartRelays01+0x198>)
 8000a14:	f004 f8b6 	bl	8004b84 <HAL_WWDG_Refresh>
			}
			crc_decode();
 8000a18:	f7ff fd9c 	bl	8000554 <crc_decode>

			switch(RxData[0]){
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <StartRelays01+0x19c>)
 8000a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a22:	1e54      	subs	r4, r2, #1
 8000a24:	f143 35ff 	adc.w	r5, r3, #4294967295
 8000a28:	2c08      	cmp	r4, #8
 8000a2a:	f175 0300 	sbcs.w	r3, r5, #0
 8000a2e:	d275      	bcs.n	8000b1c <StartRelays01+0x124>
 8000a30:	2c07      	cmp	r4, #7
 8000a32:	d873      	bhi.n	8000b1c <StartRelays01+0x124>
 8000a34:	a301      	add	r3, pc, #4	; (adr r3, 8000a3c <StartRelays01+0x44>)
 8000a36:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a5d 	.word	0x08000a5d
 8000a40:	08000a7f 	.word	0x08000a7f
 8000a44:	08000a8b 	.word	0x08000a8b
 8000a48:	08000aad 	.word	0x08000aad
 8000a4c:	08000ab9 	.word	0x08000ab9
 8000a50:	08000add 	.word	0x08000add
 8000a54:	08000aeb 	.word	0x08000aeb
 8000a58:	08000b0f 	.word	0x08000b0f
			case RELAY1_ON:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2104      	movs	r1, #4
 8000a60:	484d      	ldr	r0, [pc, #308]	; (8000b98 <StartRelays01+0x1a0>)
 8000a62:	f000 fdd1 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay1_msg, 20, 10);
 8000a66:	230a      	movs	r3, #10
 8000a68:	2214      	movs	r2, #20
 8000a6a:	494c      	ldr	r1, [pc, #304]	; (8000b9c <StartRelays01+0x1a4>)
 8000a6c:	484c      	ldr	r0, [pc, #304]	; (8000ba0 <StartRelays01+0x1a8>)
 8000a6e:	f002 fde1 	bl	8003634 <HAL_UART_Transmit>
				relay1_count++;
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <StartRelays01+0x1ac>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a4a      	ldr	r2, [pc, #296]	; (8000ba4 <StartRelays01+0x1ac>)
 8000a7a:	6013      	str	r3, [r2, #0]
				//flash_write(RELAY1_ADDRESS, relay1_count, timer_flag, &hwwdg);
				break;
 8000a7c:	e065      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY1_OFF:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2104      	movs	r1, #4
 8000a82:	4845      	ldr	r0, [pc, #276]	; (8000b98 <StartRelays01+0x1a0>)
 8000a84:	f000 fdc0 	bl	8001608 <HAL_GPIO_WritePin>
				break;
 8000a88:	e05f      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY2_ON:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	4842      	ldr	r0, [pc, #264]	; (8000b98 <StartRelays01+0x1a0>)
 8000a90:	f000 fdba 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay2_msg, 20, 10);
 8000a94:	230a      	movs	r3, #10
 8000a96:	2214      	movs	r2, #20
 8000a98:	4943      	ldr	r1, [pc, #268]	; (8000ba8 <StartRelays01+0x1b0>)
 8000a9a:	4841      	ldr	r0, [pc, #260]	; (8000ba0 <StartRelays01+0x1a8>)
 8000a9c:	f002 fdca 	bl	8003634 <HAL_UART_Transmit>
				relay2_count++;
 8000aa0:	4b42      	ldr	r3, [pc, #264]	; (8000bac <StartRelays01+0x1b4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	4a41      	ldr	r2, [pc, #260]	; (8000bac <StartRelays01+0x1b4>)
 8000aa8:	6013      	str	r3, [r2, #0]
				//flash_write(RELAY2_ADDRESS, relay2_count, timer_flag, &hwwdg);
				break;
 8000aaa:	e04e      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY2_OFF:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2108      	movs	r1, #8
 8000ab0:	4839      	ldr	r0, [pc, #228]	; (8000b98 <StartRelays01+0x1a0>)
 8000ab2:	f000 fda9 	bl	8001608 <HAL_GPIO_WritePin>
				break;
 8000ab6:	e048      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY3_ON:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000abe:	483c      	ldr	r0, [pc, #240]	; (8000bb0 <StartRelays01+0x1b8>)
 8000ac0:	f000 fda2 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay3_msg, 20, 10);
 8000ac4:	230a      	movs	r3, #10
 8000ac6:	2214      	movs	r2, #20
 8000ac8:	493a      	ldr	r1, [pc, #232]	; (8000bb4 <StartRelays01+0x1bc>)
 8000aca:	4835      	ldr	r0, [pc, #212]	; (8000ba0 <StartRelays01+0x1a8>)
 8000acc:	f002 fdb2 	bl	8003634 <HAL_UART_Transmit>
				relay3_count++;
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <StartRelays01+0x1c0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	4a38      	ldr	r2, [pc, #224]	; (8000bb8 <StartRelays01+0x1c0>)
 8000ad8:	6013      	str	r3, [r2, #0]
				//flash_write(RELAY3_ADDRESS, relay3_count, timer_flag, &hwwdg);
				break;
 8000ada:	e036      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY3_OFF:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	4833      	ldr	r0, [pc, #204]	; (8000bb0 <StartRelays01+0x1b8>)
 8000ae4:	f000 fd90 	bl	8001608 <HAL_GPIO_WritePin>
				break;
 8000ae8:	e02f      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY4_ON:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000aea:	2200      	movs	r2, #0
 8000aec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af0:	482f      	ldr	r0, [pc, #188]	; (8000bb0 <StartRelays01+0x1b8>)
 8000af2:	f000 fd89 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart2, relay4_msg, 20, 10);
 8000af6:	230a      	movs	r3, #10
 8000af8:	2214      	movs	r2, #20
 8000afa:	4930      	ldr	r1, [pc, #192]	; (8000bbc <StartRelays01+0x1c4>)
 8000afc:	4828      	ldr	r0, [pc, #160]	; (8000ba0 <StartRelays01+0x1a8>)
 8000afe:	f002 fd99 	bl	8003634 <HAL_UART_Transmit>
				relay4_count++;
 8000b02:	4b2f      	ldr	r3, [pc, #188]	; (8000bc0 <StartRelays01+0x1c8>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	4a2d      	ldr	r2, [pc, #180]	; (8000bc0 <StartRelays01+0x1c8>)
 8000b0a:	6013      	str	r3, [r2, #0]
				//flash_write(RELAY4_ADDRESS, relay4_count, timer_flag, &hwwdg);
				break;
 8000b0c:	e01d      	b.n	8000b4a <StartRelays01+0x152>
			case RELAY4_OFF:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <StartRelays01+0x1b8>)
 8000b16:	f000 fd77 	bl	8001608 <HAL_GPIO_WritePin>
				break;
 8000b1a:	e016      	b.n	8000b4a <StartRelays01+0x152>
			default:
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2104      	movs	r1, #4
 8000b20:	481d      	ldr	r0, [pc, #116]	; (8000b98 <StartRelays01+0x1a0>)
 8000b22:	f000 fd71 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2108      	movs	r1, #8
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <StartRelays01+0x1a0>)
 8000b2c:	f000 fd6c 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b36:	481e      	ldr	r0, [pc, #120]	; (8000bb0 <StartRelays01+0x1b8>)
 8000b38:	f000 fd66 	bl	8001608 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b42:	481b      	ldr	r0, [pc, #108]	; (8000bb0 <StartRelays01+0x1b8>)
 8000b44:	f000 fd60 	bl	8001608 <HAL_GPIO_WritePin>
				break;
 8000b48:	bf00      	nop
			}
		}

		//error reset
		if(LL_TIM_IsActiveFlag_UPDATE(TIM16)){
 8000b4a:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <StartRelays01+0x1cc>)
 8000b4c:	f7ff fcaf 	bl	80004ae <LL_TIM_IsActiveFlag_UPDATE>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00b      	beq.n	8000b6e <StartRelays01+0x176>
			LL_TIM_ClearFlag_UPDATE(TIM16);
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <StartRelays01+0x1cc>)
 8000b58:	f7ff fc9b 	bl	8000492 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM16);
 8000b5c:	4819      	ldr	r0, [pc, #100]	; (8000bc4 <StartRelays01+0x1cc>)
 8000b5e:	f7ff fc78 	bl	8000452 <LL_TIM_DisableCounter>
			error_flag = false;
 8000b62:	4b19      	ldr	r3, [pc, #100]	; (8000bc8 <StartRelays01+0x1d0>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
			errors = 0;
 8000b68:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <StartRelays01+0x1d4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
		}
		if(errors > 10){
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <StartRelays01+0x1d4>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b0a      	cmp	r3, #10
 8000b74:	f67f af44 	bls.w	8000a00 <StartRelays01+0x8>
			HAL_UART_Transmit(&huart2, err_max, 50, 10);
 8000b78:	230a      	movs	r3, #10
 8000b7a:	2232      	movs	r2, #50	; 0x32
 8000b7c:	4914      	ldr	r1, [pc, #80]	; (8000bd0 <StartRelays01+0x1d8>)
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <StartRelays01+0x1a8>)
 8000b80:	f002 fd58 	bl	8003634 <HAL_UART_Transmit>
		if(rx_flag){
 8000b84:	e73c      	b.n	8000a00 <StartRelays01+0x8>
 8000b86:	bf00      	nop
 8000b88:	20000210 	.word	0x20000210
 8000b8c:	20000212 	.word	0x20000212
 8000b90:	200001dc 	.word	0x200001dc
 8000b94:	200001f8 	.word	0x200001f8
 8000b98:	48000800 	.word	0x48000800
 8000b9c:	2000003c 	.word	0x2000003c
 8000ba0:	20000154 	.word	0x20000154
 8000ba4:	20000214 	.word	0x20000214
 8000ba8:	20000050 	.word	0x20000050
 8000bac:	20000218 	.word	0x20000218
 8000bb0:	48000400 	.word	0x48000400
 8000bb4:	20000064 	.word	0x20000064
 8000bb8:	2000021c 	.word	0x2000021c
 8000bbc:	20000078 	.word	0x20000078
 8000bc0:	20000220 	.word	0x20000220
 8000bc4:	40014400 	.word	0x40014400
 8000bc8:	20000213 	.word	0x20000213
 8000bcc:	20000211 	.word	0x20000211
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <StartWatchdog02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWatchdog02 */
void StartWatchdog02(void *argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWatchdog02 */
  /* Infinite loop */
  for(;;)
  {
		//watchdog calibration
		if(LL_TIM_IsActiveFlag_UPDATE(TIM17)){
 8000bdc:	480b      	ldr	r0, [pc, #44]	; (8000c0c <StartWatchdog02+0x38>)
 8000bde:	f7ff fc66 	bl	80004ae <LL_TIM_IsActiveFlag_UPDATE>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0f9      	beq.n	8000bdc <StartWatchdog02+0x8>
			LL_TIM_ClearFlag_UPDATE(TIM17);
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <StartWatchdog02+0x38>)
 8000bea:	f7ff fc52 	bl	8000492 <LL_TIM_ClearFlag_UPDATE>
			LL_TIM_DisableCounter(TIM17);
 8000bee:	4807      	ldr	r0, [pc, #28]	; (8000c0c <StartWatchdog02+0x38>)
 8000bf0:	f7ff fc2f 	bl	8000452 <LL_TIM_DisableCounter>
			MX_WWDG_Init();
 8000bf4:	f7ff fe7e 	bl	80008f4 <MX_WWDG_Init>
			timer_flag = true;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <StartWatchdog02+0x3c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, wwdg_msg, 20, 10);
 8000bfe:	230a      	movs	r3, #10
 8000c00:	2214      	movs	r2, #20
 8000c02:	4904      	ldr	r1, [pc, #16]	; (8000c14 <StartWatchdog02+0x40>)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <StartWatchdog02+0x44>)
 8000c06:	f002 fd15 	bl	8003634 <HAL_UART_Transmit>
		if(LL_TIM_IsActiveFlag_UPDATE(TIM17)){
 8000c0a:	e7e7      	b.n	8000bdc <StartWatchdog02+0x8>
 8000c0c:	40014800 	.word	0x40014800
 8000c10:	20000212 	.word	0x20000212
 8000c14:	2000008c 	.word	0x2000008c
 8000c18:	20000154 	.word	0x20000154

08000c1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d101      	bne.n	8000c32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2e:	f000 f9e7 	bl	8001000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40001000 	.word	0x40001000

08000c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c44:	b672      	cpsid	i
}
 8000c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <Error_Handler+0x8>
	...

08000c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	4a10      	ldr	r2, [pc, #64]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6193      	str	r3, [r2, #24]
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_MspInit+0x4c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	210f      	movs	r1, #15
 8000c86:	f06f 0001 	mvn.w	r0, #1
 8000c8a:	f000 fa91 	bl	80011b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08c      	sub	sp, #48	; 0x30
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <HAL_UART_MspInit+0xf8>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d130      	bne.n	8000d20 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cbe:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000cd8:	695b      	ldr	r3, [r3, #20]
 8000cda:	4a2f      	ldr	r2, [pc, #188]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ce0:	6153      	str	r3, [r2, #20]
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cee:	2330      	movs	r3, #48	; 0x30
 8000cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	4619      	mov	r1, r3
 8000d08:	4824      	ldr	r0, [pc, #144]	; (8000d9c <HAL_UART_MspInit+0x100>)
 8000d0a:	f000 faf3 	bl	80012f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2025      	movs	r0, #37	; 0x25
 8000d14:	f000 fa4c 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d18:	2025      	movs	r0, #37	; 0x25
 8000d1a:	f000 fa65 	bl	80011e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d1e:	e035      	b.n	8000d8c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <HAL_UART_MspInit+0x104>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d130      	bne.n	8000d8c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6153      	str	r3, [r2, #20]
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_UART_MspInit+0xfc>)
 8000d50:	695b      	ldr	r3, [r3, #20]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f000 fabc 	bl	80012f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	2026      	movs	r0, #38	; 0x26
 8000d82:	f000 fa15 	bl	80011b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d86:	2026      	movs	r0, #38	; 0x26
 8000d88:	f000 fa2e 	bl	80011e8 <HAL_NVIC_EnableIRQ>
}
 8000d8c:	bf00      	nop
 8000d8e:	3730      	adds	r7, #48	; 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013800 	.word	0x40013800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	40004400 	.word	0x40004400

08000da4 <HAL_WWDG_MspInit>:
* This function configures the hardware resources used in this example
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if(hwwdg->Instance==WWDG)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <HAL_WWDG_MspInit+0x38>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10b      	bne.n	8000dce <HAL_WWDG_MspInit+0x2a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_WWDG_MspInit+0x3c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_WWDG_MspInit+0x3c>)
 8000dbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc0:	61d3      	str	r3, [r2, #28]
 8000dc2:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <HAL_WWDG_MspInit+0x3c>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8000dce:	bf00      	nop
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40002c00 	.word	0x40002c00
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08e      	sub	sp, #56	; 0x38
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000df4:	4b33      	ldr	r3, [pc, #204]	; (8000ec4 <HAL_InitTick+0xe0>)
 8000df6:	69db      	ldr	r3, [r3, #28]
 8000df8:	4a32      	ldr	r2, [pc, #200]	; (8000ec4 <HAL_InitTick+0xe0>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	61d3      	str	r3, [r2, #28]
 8000e00:	4b30      	ldr	r3, [pc, #192]	; (8000ec4 <HAL_InitTick+0xe0>)
 8000e02:	69db      	ldr	r3, [r3, #28]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e0c:	f107 0210 	add.w	r2, r7, #16
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4611      	mov	r1, r2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fe98 	bl	8002b4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d103      	bne.n	8000e2e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e26:	f001 fe4d 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8000e2a:	6378      	str	r0, [r7, #52]	; 0x34
 8000e2c:	e004      	b.n	8000e38 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e2e:	f001 fe49 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8000e32:	4603      	mov	r3, r0
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <HAL_InitTick+0xe4>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9b      	lsrs	r3, r3, #18
 8000e42:	3b01      	subs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e46:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e48:	4a21      	ldr	r2, [pc, #132]	; (8000ed0 <HAL_InitTick+0xec>)
 8000e4a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e52:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e54:	4a1d      	ldr	r2, [pc, #116]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e58:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e60:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e66:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e6c:	4817      	ldr	r0, [pc, #92]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e6e:	f002 f8bd 	bl	8002fec <HAL_TIM_Base_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d11b      	bne.n	8000eb8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e80:	4812      	ldr	r0, [pc, #72]	; (8000ecc <HAL_InitTick+0xe8>)
 8000e82:	f002 f915 	bl	80030b0 <HAL_TIM_Base_Start_IT>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e8c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d111      	bne.n	8000eb8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e94:	2036      	movs	r0, #54	; 0x36
 8000e96:	f000 f9a7 	bl	80011e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d808      	bhi.n	8000eb2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f000 f983 	bl	80011b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <HAL_InitTick+0xf0>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e002      	b.n	8000eb8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3738      	adds	r7, #56	; 0x38
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	431bde83 	.word	0x431bde83
 8000ecc:	20000224 	.word	0x20000224
 8000ed0:	40001000 	.word	0x40001000
 8000ed4:	200000a4 	.word	0x200000a4

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <MemManage_Handler+0x4>

08000eea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <BusFault_Handler+0x4>

08000ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <UsageFault_Handler+0x4>

08000ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <USART1_IRQHandler+0x10>)
 8000f26:	f002 fc0f 	bl	8003748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	200000cc 	.word	0x200000cc

08000f34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <USART2_IRQHandler+0x10>)
 8000f3a:	f002 fc05 	bl	8003748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000154 	.word	0x20000154

08000f48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM6_DAC_IRQHandler+0x10>)
 8000f4e:	f002 f91f 	bl	8003190 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000224 	.word	0x20000224

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f84:	f7ff ffea 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	; (8000fbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	; (8000fc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	; (8000fcc <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f006 fbb5 	bl	800771c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fb2:	f7ff fb2f 	bl	8000614 <main>

08000fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fb6:	e7fe      	b.n	8000fb6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8000fc4:	08007854 	.word	0x08007854
  ldr r2, =_sbss
 8000fc8:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8000fcc:	20001bbc 	.word	0x20001bbc

08000fd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC1_2_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x28>)
 8000fde:	f043 0310 	orr.w	r3, r3, #16
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 f8d8 	bl	800119a <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f7ff fefa 	bl	8000de4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff fe2c 	bl	8000c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200000a8 	.word	0x200000a8
 8001024:	20000270 	.word	0x20000270

08001028 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;  
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000270 	.word	0x20000270

08001040 <__NVIC_SetPriorityGrouping>:
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4907      	ldr	r1, [pc, #28]	; (80010dc <__NVIC_EnableIRQ+0x38>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100

080010e0 <__NVIC_SetPriority>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff ff4c 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c2:	f7ff ff61 	bl	8001088 <__NVIC_GetPriorityGrouping>
 80011c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ffb1 	bl	8001134 <NVIC_EncodePriority>
 80011d2:	4602      	mov	r2, r0
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff80 	bl	80010e0 <__NVIC_SetPriority>
}
 80011e0:	bf00      	nop
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff54 	bl	80010a4 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2204      	movs	r2, #4
 800121a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e020      	b.n	800126a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 020e 	bic.w	r2, r2, #14
 8001236:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	2101      	movs	r1, #1
 8001252:	fa01 f202 	lsl.w	r2, r1, r2
 8001256:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001288:	2b02      	cmp	r3, #2
 800128a:	d005      	beq.n	8001298 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2204      	movs	r2, #4
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	73fb      	strb	r3, [r7, #15]
 8001296:	e027      	b.n	80012e8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f022 020e 	bic.w	r2, r2, #14
 80012a6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0201 	bic.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012c0:	2101      	movs	r1, #1
 80012c2:	fa01 f202 	lsl.w	r2, r1, r2
 80012c6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2201      	movs	r2, #1
 80012cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	4798      	blx	r3
    } 
  }
  return status;
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b087      	sub	sp, #28
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001302:	e160      	b.n	80015c6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	2101      	movs	r1, #1
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f000 8152 	beq.w	80015c0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d005      	beq.n	8001334 <HAL_GPIO_Init+0x40>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d130      	bne.n	8001396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68da      	ldr	r2, [r3, #12]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800136a:	2201      	movs	r2, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	43db      	mvns	r3, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4013      	ands	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	f003 0201 	and.w	r2, r3, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d017      	beq.n	80013d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	2203      	movs	r2, #3
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43db      	mvns	r3, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d123      	bne.n	8001426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	08da      	lsrs	r2, r3, #3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3208      	adds	r2, #8
 80013e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	220f      	movs	r2, #15
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	691a      	ldr	r2, [r3, #16]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	6939      	ldr	r1, [r7, #16]
 8001422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 0203 	and.w	r2, r3, #3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 80ac 	beq.w	80015c0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001468:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_GPIO_Init+0x2f0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a5d      	ldr	r2, [pc, #372]	; (80015e4 <HAL_GPIO_Init+0x2f0>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <HAL_GPIO_Init+0x2f0>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001480:	4a59      	ldr	r2, [pc, #356]	; (80015e8 <HAL_GPIO_Init+0x2f4>)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	220f      	movs	r2, #15
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014aa:	d025      	beq.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a4f      	ldr	r2, [pc, #316]	; (80015ec <HAL_GPIO_Init+0x2f8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d01f      	beq.n	80014f4 <HAL_GPIO_Init+0x200>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a4e      	ldr	r2, [pc, #312]	; (80015f0 <HAL_GPIO_Init+0x2fc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d019      	beq.n	80014f0 <HAL_GPIO_Init+0x1fc>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a4d      	ldr	r2, [pc, #308]	; (80015f4 <HAL_GPIO_Init+0x300>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d013      	beq.n	80014ec <HAL_GPIO_Init+0x1f8>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a4c      	ldr	r2, [pc, #304]	; (80015f8 <HAL_GPIO_Init+0x304>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d00d      	beq.n	80014e8 <HAL_GPIO_Init+0x1f4>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4a4b      	ldr	r2, [pc, #300]	; (80015fc <HAL_GPIO_Init+0x308>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d007      	beq.n	80014e4 <HAL_GPIO_Init+0x1f0>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4a      	ldr	r2, [pc, #296]	; (8001600 <HAL_GPIO_Init+0x30c>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d101      	bne.n	80014e0 <HAL_GPIO_Init+0x1ec>
 80014dc:	2306      	movs	r3, #6
 80014de:	e00c      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e0:	2307      	movs	r3, #7
 80014e2:	e00a      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e4:	2305      	movs	r3, #5
 80014e6:	e008      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014e8:	2304      	movs	r3, #4
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014ec:	2303      	movs	r3, #3
 80014ee:	e004      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e002      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_GPIO_Init+0x206>
 80014f8:	2300      	movs	r3, #0
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	f002 0203 	and.w	r2, r2, #3
 8001500:	0092      	lsls	r2, r2, #2
 8001502:	4093      	lsls	r3, r2
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800150a:	4937      	ldr	r1, [pc, #220]	; (80015e8 <HAL_GPIO_Init+0x2f4>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_GPIO_Init+0x310>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d003      	beq.n	800153c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800153c:	4a31      	ldr	r2, [pc, #196]	; (8001604 <HAL_GPIO_Init+0x310>)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001542:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_GPIO_Init+0x310>)
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4313      	orrs	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001566:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_GPIO_Init+0x310>)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156c:	4b25      	ldr	r3, [pc, #148]	; (8001604 <HAL_GPIO_Init+0x310>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	43db      	mvns	r3, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4013      	ands	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001590:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_GPIO_Init+0x310>)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001596:	4b1b      	ldr	r3, [pc, #108]	; (8001604 <HAL_GPIO_Init+0x310>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <HAL_GPIO_Init+0x310>)
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	3301      	adds	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa22 f303 	lsr.w	r3, r2, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f47f ae97 	bne.w	8001304 <HAL_GPIO_Init+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	371c      	adds	r7, #28
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000
 80015e8:	40010000 	.word	0x40010000
 80015ec:	48000400 	.word	0x48000400
 80015f0:	48000800 	.word	0x48000800
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48001000 	.word	0x48001000
 80015fc:	48001400 	.word	0x48001400
 8001600:	48001800 	.word	0x48001800
 8001604:	40010400 	.word	0x40010400

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001624:	e002      	b.n	800162c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800163e:	af00      	add	r7, sp, #0
 8001640:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001644:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001648:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800164a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800164e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	f001 b83a 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001662:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 816f 	beq.w	8001952 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001674:	4bb5      	ldr	r3, [pc, #724]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b04      	cmp	r3, #4
 800167e:	d00c      	beq.n	800169a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001680:	4bb2      	ldr	r3, [pc, #712]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d15c      	bne.n	8001746 <HAL_RCC_OscConfig+0x10e>
 800168c:	4baf      	ldr	r3, [pc, #700]	; (800194c <HAL_RCC_OscConfig+0x314>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001698:	d155      	bne.n	8001746 <HAL_RCC_OscConfig+0x10e>
 800169a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800169e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80016ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b2:	fab3 f383 	clz	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	095b      	lsrs	r3, r3, #5
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x94>
 80016c6:	4ba1      	ldr	r3, [pc, #644]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_OscConfig+0xc0>
 80016cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80016e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80016e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80016f4:	4b95      	ldr	r3, [pc, #596]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016fc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001700:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001704:	fa92 f2a2 	rbit	r2, r2
 8001708:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800170c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001710:	fab2 f282 	clz	r2, r2
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f042 0220 	orr.w	r2, r2, #32
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	f002 021f 	and.w	r2, r2, #31
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8111 	beq.w	8001950 <HAL_RCC_OscConfig+0x318>
 800172e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001732:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	f040 8108 	bne.w	8001950 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	f000 bfc6 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x12e>
 8001758:	4b7c      	ldr	r3, [pc, #496]	; (800194c <HAL_RCC_OscConfig+0x314>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a7b      	ldr	r2, [pc, #492]	; (800194c <HAL_RCC_OscConfig+0x314>)
 800175e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e036      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 8001766:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x158>
 8001776:	4b75      	ldr	r3, [pc, #468]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a74      	ldr	r2, [pc, #464]	; (800194c <HAL_RCC_OscConfig+0x314>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b72      	ldr	r3, [pc, #456]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a71      	ldr	r2, [pc, #452]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e021      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 8001790:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001794:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017a0:	d10c      	bne.n	80017bc <HAL_RCC_OscConfig+0x184>
 80017a2:	4b6a      	ldr	r3, [pc, #424]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a69      	ldr	r2, [pc, #420]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b67      	ldr	r3, [pc, #412]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a66      	ldr	r2, [pc, #408]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e00b      	b.n	80017d4 <HAL_RCC_OscConfig+0x19c>
 80017bc:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a62      	ldr	r2, [pc, #392]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c6:	6013      	str	r3, [r2, #0]
 80017c8:	4b60      	ldr	r3, [pc, #384]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a5f      	ldr	r2, [pc, #380]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80017ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d059      	beq.n	8001898 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fc20 	bl	8001028 <HAL_GetTick>
 80017e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ee:	f7ff fc1b 	bl	8001028 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	; 0x64
 80017fc:	d902      	bls.n	8001804 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	f000 bf67 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001808:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800180c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001810:	fa93 f3a3 	rbit	r3, r3
 8001814:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001818:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181c:	fab3 f383 	clz	r3, r3
 8001820:	b2db      	uxtb	r3, r3
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f043 0301 	orr.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b01      	cmp	r3, #1
 800182e:	d102      	bne.n	8001836 <HAL_RCC_OscConfig+0x1fe>
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x22a>
 8001836:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001842:	fa93 f3a3 	rbit	r3, r3
 8001846:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001852:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800185e:	4b3b      	ldr	r3, [pc, #236]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001866:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800186a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800186e:	fa92 f2a2 	rbit	r2, r2
 8001872:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001876:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800187a:	fab2 f282 	clz	r2, r2
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	f042 0220 	orr.w	r2, r2, #32
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	f002 021f 	and.w	r2, r2, #31
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4013      	ands	r3, r2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0ab      	beq.n	80017ee <HAL_RCC_OscConfig+0x1b6>
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001898:	f7ff fbc6 	bl	8001028 <HAL_GetTick>
 800189c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a0:	e00a      	b.n	80018b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a2:	f7ff fbc1 	bl	8001028 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b64      	cmp	r3, #100	; 0x64
 80018b0:	d902      	bls.n	80018b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	f000 bf0d 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 80018b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80018cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x2b2>
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_OscConfig+0x314>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x2de>
 80018ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80018fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001902:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001906:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800190a:	fa93 f3a3 	rbit	r3, r3
 800190e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <HAL_RCC_OscConfig+0x314>)
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800191a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800191e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001922:	fa92 f2a2 	rbit	r2, r2
 8001926:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800192a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800192e:	fab2 f282 	clz	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f042 0220 	orr.w	r2, r2, #32
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f002 021f 	and.w	r2, r2, #31
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ab      	bne.n	80018a2 <HAL_RCC_OscConfig+0x26a>
 800194a:	e002      	b.n	8001952 <HAL_RCC_OscConfig+0x31a>
 800194c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 817f 	beq.w	8001c66 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001968:	4ba7      	ldr	r3, [pc, #668]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f003 030c 	and.w	r3, r3, #12
 8001970:	2b00      	cmp	r3, #0
 8001972:	d00c      	beq.n	800198e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001974:	4ba4      	ldr	r3, [pc, #656]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 030c 	and.w	r3, r3, #12
 800197c:	2b08      	cmp	r3, #8
 800197e:	d173      	bne.n	8001a68 <HAL_RCC_OscConfig+0x430>
 8001980:	4ba1      	ldr	r3, [pc, #644]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800198c:	d16c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x430>
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001998:	fa93 f3a3 	rbit	r3, r3
 800199c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <HAL_RCC_OscConfig+0x386>
 80019b8:	4b93      	ldr	r3, [pc, #588]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	e013      	b.n	80019e6 <HAL_RCC_OscConfig+0x3ae>
 80019be:	2302      	movs	r3, #2
 80019c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019c8:	fa93 f3a3 	rbit	r3, r3
 80019cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80019d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019e2:	4b89      	ldr	r3, [pc, #548]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2202      	movs	r2, #2
 80019e8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80019ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019f0:	fa92 f2a2 	rbit	r2, r2
 80019f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80019f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80019fc:	fab2 f282 	clz	r2, r2
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f042 0220 	orr.w	r2, r2, #32
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	f002 021f 	and.w	r2, r2, #31
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00a      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3f6>
 8001a18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d002      	beq.n	8001a2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f000 be52 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b76      	ldr	r3, [pc, #472]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	21f8      	movs	r1, #248	; 0xf8
 8001a44:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a4c:	fa91 f1a1 	rbit	r1, r1
 8001a50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a58:	fab1 f181 	clz	r1, r1
 8001a5c:	b2c9      	uxtb	r1, r1
 8001a5e:	408b      	lsls	r3, r1
 8001a60:	4969      	ldr	r1, [pc, #420]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e0fe      	b.n	8001c66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8088 	beq.w	8001b8a <HAL_RCC_OscConfig+0x552>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001a84:	fa93 f3a3 	rbit	r3, r3
 8001a88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001a8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff fabf 	bl	8001028 <HAL_GetTick>
 8001aaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff faba 	bl	8001028 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d902      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	f000 be06 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001acc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ad8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	fab3 f383 	clz	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4be>
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e013      	b.n	8001b1e <HAL_RCC_OscConfig+0x4e6>
 8001af6:	2302      	movs	r3, #2
 8001af8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001afc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b00:	fa93 f3a3 	rbit	r3, r3
 8001b04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b08:	2302      	movs	r3, #2
 8001b0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	2202      	movs	r2, #2
 8001b20:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b28:	fa92 f2a2 	rbit	r2, r2
 8001b2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b34:	fab2 f282 	clz	r2, r2
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	f002 021f 	and.w	r2, r2, #31
 8001b44:	2101      	movs	r1, #1
 8001b46:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0af      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b50:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	21f8      	movs	r1, #248	; 0xf8
 8001b66:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b6e:	fa91 f1a1 	rbit	r1, r1
 8001b72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b7a:	fab1 f181 	clz	r1, r1
 8001b7e:	b2c9      	uxtb	r1, r1
 8001b80:	408b      	lsls	r3, r1
 8001b82:	4921      	ldr	r1, [pc, #132]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]
 8001b88:	e06d      	b.n	8001c66 <HAL_RCC_OscConfig+0x62e>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b94:	fa93 f3a3 	rbit	r3, r3
 8001b98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001b9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001baa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb6:	f7ff fa37 	bl	8001028 <HAL_GetTick>
 8001bba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fa32 	bl	8001028 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d902      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	f000 bd7e 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001be8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bec:	fab3 f383 	clz	r3, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5d4>
 8001c00:	4b01      	ldr	r3, [pc, #4]	; (8001c08 <HAL_RCC_OscConfig+0x5d0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	e016      	b.n	8001c34 <HAL_RCC_OscConfig+0x5fc>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c30:	4bbf      	ldr	r3, [pc, #764]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2202      	movs	r2, #2
 8001c36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c3e:	fa92 f2a2 	rbit	r2, r2
 8001c42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c4a:	fab2 f282 	clz	r2, r2
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f042 0220 	orr.w	r2, r2, #32
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	f002 021f 	and.w	r2, r2, #31
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1ac      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 8113 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d07c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x74e>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001c9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4ba2      	ldr	r3, [pc, #648]	; (8001f34 <HAL_RCC_OscConfig+0x8fc>)
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff f9b7 	bl	8001028 <HAL_GetTick>
 8001cba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f9b2 	bl	8001028 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d902      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f000 bcfe 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f2a3 	rbit	r2, r3
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d42:	2102      	movs	r1, #2
 8001d44:	6019      	str	r1, [r3, #0]
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f1a3 	rbit	r1, r3
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d5c:	6019      	str	r1, [r3, #0]
  return result;
 8001d5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fab3 f383 	clz	r3, r3
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f003 031f 	and.w	r3, r3, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d09d      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x688>
 8001d84:	e08d      	b.n	8001ea2 <HAL_RCC_OscConfig+0x86a>
 8001d86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001da8:	601a      	str	r2, [r3, #0]
  return result;
 8001daa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001db2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_RCC_OscConfig+0x8fc>)
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dc8:	f7ff f92e 	bl	8001028 <HAL_GetTick>
 8001dcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dd0:	e00a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dd2:	f7ff f929 	bl	8001028 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d902      	bls.n	8001de8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	f000 bc75 	b.w	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001de8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001df0:	2202      	movs	r2, #2
 8001df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e14:	2202      	movs	r2, #2
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	fa93 f2a3 	rbit	r2, r3
 8001e26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e38:	2202      	movs	r2, #2
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001e52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e60:	2102      	movs	r1, #2
 8001e62:	6019      	str	r1, [r3, #0]
 8001e64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	fa93 f1a3 	rbit	r1, r3
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e7a:	6019      	str	r1, [r3, #0]
  return result;
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	fab3 f383 	clz	r3, r3
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	f003 031f 	and.w	r3, r3, #31
 8001e96:	2101      	movs	r1, #1
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d197      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0304 	and.w	r3, r3, #4
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 81a5 	beq.w	8002202 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d116      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_RCC_OscConfig+0x8f8>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001ede:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <HAL_RCC_OscConfig+0x900>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d121      	bne.n	8001f48 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <HAL_RCC_OscConfig+0x900>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a0b      	ldr	r2, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x900>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f10:	f7ff f88a 	bl	8001028 <HAL_GetTick>
 8001f14:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f18:	e010      	b.n	8001f3c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1a:	f7ff f885 	bl	8001028 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d908      	bls.n	8001f3c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e3d1      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8001f2e:	bf00      	nop
 8001f30:	40021000 	.word	0x40021000
 8001f34:	10908120 	.word	0x10908120
 8001f38:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <HAL_RCC_OscConfig+0xb3c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0e8      	beq.n	8001f1a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d106      	bne.n	8001f66 <HAL_RCC_OscConfig+0x92e>
 8001f58:	4b87      	ldr	r3, [pc, #540]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	4a86      	ldr	r2, [pc, #536]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6213      	str	r3, [r2, #32]
 8001f64:	e035      	b.n	8001fd2 <HAL_RCC_OscConfig+0x99a>
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10c      	bne.n	8001f90 <HAL_RCC_OscConfig+0x958>
 8001f76:	4b80      	ldr	r3, [pc, #512]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f78:	6a1b      	ldr	r3, [r3, #32]
 8001f7a:	4a7f      	ldr	r2, [pc, #508]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6213      	str	r3, [r2, #32]
 8001f82:	4b7d      	ldr	r3, [pc, #500]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	4a7c      	ldr	r2, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6213      	str	r3, [r2, #32]
 8001f8e:	e020      	b.n	8001fd2 <HAL_RCC_OscConfig+0x99a>
 8001f90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0x982>
 8001fa0:	4b75      	ldr	r3, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a74      	ldr	r2, [pc, #464]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fa6:	f043 0304 	orr.w	r3, r3, #4
 8001faa:	6213      	str	r3, [r2, #32]
 8001fac:	4b72      	ldr	r3, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	4a71      	ldr	r2, [pc, #452]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6213      	str	r3, [r2, #32]
 8001fb8:	e00b      	b.n	8001fd2 <HAL_RCC_OscConfig+0x99a>
 8001fba:	4b6f      	ldr	r3, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a6e      	ldr	r2, [pc, #440]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b6c      	ldr	r3, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a6b      	ldr	r2, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8081 	beq.w	80020e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe4:	f7ff f820 	bl	8001028 <HAL_GetTick>
 8001fe8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fec:	e00b      	b.n	8002006 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff f81b 	bl	8001028 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e365      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800200e:	2202      	movs	r2, #2
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002016:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002032:	2202      	movs	r2, #2
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002056:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	b2db      	uxtb	r3, r3
 8002062:	f043 0302 	orr.w	r3, r3, #2
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d102      	bne.n	8002072 <HAL_RCC_OscConfig+0xa3a>
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	e013      	b.n	800209a <HAL_RCC_OscConfig+0xa62>
 8002072:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002076:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800207a:	2202      	movs	r2, #2
 800207c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002082:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	fa93 f2a3 	rbit	r2, r3
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800209e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020a2:	2102      	movs	r1, #2
 80020a4:	6011      	str	r1, [r2, #0]
 80020a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	fa92 f1a2 	rbit	r1, r2
 80020b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020bc:	6011      	str	r1, [r2, #0]
  return result;
 80020be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80020c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f002 021f 	and.w	r2, r2, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d084      	beq.n	8001fee <HAL_RCC_OscConfig+0x9b6>
 80020e4:	e083      	b.n	80021ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e6:	f7fe ff9f 	bl	8001028 <HAL_GetTick>
 80020ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ee:	e00b      	b.n	8002108 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7fe ff9a 	bl	8001028 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002100:	4293      	cmp	r3, r2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e2e4      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8002108:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002110:	2202      	movs	r2, #2
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002118:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002130:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002134:	2202      	movs	r2, #2
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fa93 f2a3 	rbit	r2, r3
 8002146:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800214e:	601a      	str	r2, [r3, #0]
  return result;
 8002150:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002154:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d106      	bne.n	800217c <HAL_RCC_OscConfig+0xb44>
 800216e:	4b02      	ldr	r3, [pc, #8]	; (8002178 <HAL_RCC_OscConfig+0xb40>)
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	e017      	b.n	80021a4 <HAL_RCC_OscConfig+0xb6c>
 8002174:	40007000 	.word	0x40007000
 8002178:	40021000 	.word	0x40021000
 800217c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002180:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002184:	2202      	movs	r2, #2
 8002186:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800218c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	fa93 f2a3 	rbit	r2, r3
 8002196:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	4bb3      	ldr	r3, [pc, #716]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021ac:	2102      	movs	r1, #2
 80021ae:	6011      	str	r1, [r2, #0]
 80021b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	fa92 f1a2 	rbit	r1, r2
 80021be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021c6:	6011      	str	r1, [r2, #0]
  return result;
 80021c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021cc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80021d0:	6812      	ldr	r2, [r2, #0]
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	f002 021f 	and.w	r2, r2, #31
 80021e2:	2101      	movs	r1, #1
 80021e4:	fa01 f202 	lsl.w	r2, r1, r2
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d180      	bne.n	80020f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d105      	bne.n	8002202 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f6:	4b9e      	ldr	r3, [pc, #632]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a9d      	ldr	r2, [pc, #628]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 80021fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002200:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002202:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002206:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 825e 	beq.w	80026d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b96      	ldr	r3, [pc, #600]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b08      	cmp	r3, #8
 800221e:	f000 821f 	beq.w	8002660 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b02      	cmp	r3, #2
 8002230:	f040 8170 	bne.w	8002514 <HAL_RCC_OscConfig+0xedc>
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800223c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002240:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002246:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	fa93 f2a3 	rbit	r2, r3
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002258:	601a      	str	r2, [r3, #0]
  return result;
 800225a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800225e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002262:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800226e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	461a      	mov	r2, r3
 8002276:	2300      	movs	r3, #0
 8002278:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fed5 	bl	8001028 <HAL_GetTick>
 800227e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e009      	b.n	8002298 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fed0 	bl	8001028 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e21c      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8002298:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fa93 f2a3 	rbit	r2, r3
 80022b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022bc:	601a      	str	r2, [r3, #0]
  return result;
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80022c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c8:	fab3 f383 	clz	r3, r3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0xcaa>
 80022dc:	4b64      	ldr	r3, [pc, #400]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	e027      	b.n	8002332 <HAL_RCC_OscConfig+0xcfa>
 80022e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	fa93 f2a3 	rbit	r2, r3
 80022fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002302:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002332:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002336:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800233a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800233e:	6011      	str	r1, [r2, #0]
 8002340:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002344:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fa92 f1a2 	rbit	r1, r2
 800234e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002352:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002356:	6011      	str	r1, [r2, #0]
  return result;
 8002358:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800235c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002360:	6812      	ldr	r2, [r2, #0]
 8002362:	fab2 f282 	clz	r2, r2
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	f042 0220 	orr.w	r2, r2, #32
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	f002 021f 	and.w	r2, r2, #31
 8002372:	2101      	movs	r1, #1
 8002374:	fa01 f202 	lsl.w	r2, r1, r2
 8002378:	4013      	ands	r3, r2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d182      	bne.n	8002284 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800237e:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	f023 020f 	bic.w	r2, r3, #15
 8002386:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 8002394:	4313      	orrs	r3, r2
 8002396:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002398:	4b35      	ldr	r3, [pc, #212]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80023a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6a19      	ldr	r1, [r3, #32]
 80023ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	430b      	orrs	r3, r1
 80023ba:	492d      	ldr	r1, [pc, #180]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	604b      	str	r3, [r1, #4]
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80023ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	461a      	mov	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002406:	f7fe fe0f 	bl	8001028 <HAL_GetTick>
 800240a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800240e:	e009      	b.n	8002424 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fe0a 	bl	8001028 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e156      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800242c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002430:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002436:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	fa93 f2a3 	rbit	r2, r3
 8002440:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002444:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002448:	601a      	str	r2, [r3, #0]
  return result;
 800244a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800244e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002452:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002454:	fab3 f383 	clz	r3, r3
 8002458:	b2db      	uxtb	r3, r3
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	b2db      	uxtb	r3, r3
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0xe3c>
 8002468:	4b01      	ldr	r3, [pc, #4]	; (8002470 <HAL_RCC_OscConfig+0xe38>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	e02a      	b.n	80024c4 <HAL_RCC_OscConfig+0xe8c>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002478:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800247c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002486:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002494:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	fa93 f2a3 	rbit	r2, r3
 80024b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	4b86      	ldr	r3, [pc, #536]	; (80026dc <HAL_RCC_OscConfig+0x10a4>)
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024d0:	6011      	str	r1, [r2, #0]
 80024d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	fa92 f1a2 	rbit	r1, r2
 80024e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024e4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024e8:	6011      	str	r1, [r2, #0]
  return result;
 80024ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024ee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f002 021f 	and.w	r2, r2, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	f43f af7f 	beq.w	8002410 <HAL_RCC_OscConfig+0xdd8>
 8002512:	e0dd      	b.n	80026d0 <HAL_RCC_OscConfig+0x1098>
 8002514:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002518:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800251c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002526:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002534:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002538:	601a      	str	r2, [r3, #0]
  return result;
 800253a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800253e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002542:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800254e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	461a      	mov	r2, r3
 8002556:	2300      	movs	r3, #0
 8002558:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7fe fd65 	bl	8001028 <HAL_GetTick>
 800255e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002562:	e009      	b.n	8002578 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002564:	f7fe fd60 	bl	8001028 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0ac      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
 8002578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800257c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002584:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002598:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800259c:	601a      	str	r2, [r3, #0]
  return result;
 800259e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80025a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d102      	bne.n	80025c2 <HAL_RCC_OscConfig+0xf8a>
 80025bc:	4b47      	ldr	r3, [pc, #284]	; (80026dc <HAL_RCC_OscConfig+0x10a4>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	e027      	b.n	8002612 <HAL_RCC_OscConfig+0xfda>
 80025c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	fa93 f2a3 	rbit	r2, r3
 8002604:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002608:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x10a4>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002616:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800261a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800261e:	6011      	str	r1, [r2, #0]
 8002620:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002624:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	fa92 f1a2 	rbit	r1, r2
 800262e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002632:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002636:	6011      	str	r1, [r2, #0]
  return result;
 8002638:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800263c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	fab2 f282 	clz	r2, r2
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f042 0220 	orr.w	r2, r2, #32
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	f002 021f 	and.w	r2, r2, #31
 8002652:	2101      	movs	r1, #1
 8002654:	fa01 f202 	lsl.w	r2, r1, r2
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d182      	bne.n	8002564 <HAL_RCC_OscConfig+0xf2c>
 800265e:	e037      	b.n	80026d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002660:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002664:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e02e      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HAL_RCC_OscConfig+0x10a4>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HAL_RCC_OscConfig+0x10a4>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002684:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002688:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800268c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002690:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	429a      	cmp	r2, r3
 800269a:	d117      	bne.n	80026cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800269c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80026a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d10b      	bne.n	80026cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80026b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026b8:	f003 020f 	and.w	r2, r3, #15
 80026bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40021000 	.word	0x40021000

080026e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b09e      	sub	sp, #120	; 0x78
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e162      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b90      	ldr	r3, [pc, #576]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d910      	bls.n	8002728 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b8d      	ldr	r3, [pc, #564]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 0207 	bic.w	r2, r3, #7
 800270e:	498b      	ldr	r1, [pc, #556]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002716:	4b89      	ldr	r3, [pc, #548]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	429a      	cmp	r2, r3
 8002722:	d001      	beq.n	8002728 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e14a      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b82      	ldr	r3, [pc, #520]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	497f      	ldr	r1, [pc, #508]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	f000 80dc 	beq.w	800290c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d13c      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xf6>
 800275c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002760:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276c:	fab3 f383 	clz	r3, r3
 8002770:	b2db      	uxtb	r3, r3
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_RCC_ClockConfig+0xa6>
 8002780:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	e00f      	b.n	80027a6 <HAL_RCC_ClockConfig+0xc6>
 8002786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800278a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278e:	fa93 f3a3 	rbit	r3, r3
 8002792:	667b      	str	r3, [r7, #100]	; 0x64
 8002794:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002798:	663b      	str	r3, [r7, #96]	; 0x60
 800279a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279c:	fa93 f3a3 	rbit	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a2:	4b67      	ldr	r3, [pc, #412]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80027ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027ae:	fa92 f2a2 	rbit	r2, r2
 80027b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80027b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80027b6:	fab2 f282 	clz	r2, r2
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	f042 0220 	orr.w	r2, r2, #32
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	f002 021f 	and.w	r2, r2, #31
 80027c6:	2101      	movs	r1, #1
 80027c8:	fa01 f202 	lsl.w	r2, r1, r2
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d17b      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e0f3      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d13c      	bne.n	8002858 <HAL_RCC_ClockConfig+0x178>
 80027de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	fab3 f383 	clz	r3, r3
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	095b      	lsrs	r3, r3, #5
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d102      	bne.n	8002808 <HAL_RCC_ClockConfig+0x128>
 8002802:	4b4f      	ldr	r3, [pc, #316]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	e00f      	b.n	8002828 <HAL_RCC_ClockConfig+0x148>
 8002808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800280c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002810:	fa93 f3a3 	rbit	r3, r3
 8002814:	647b      	str	r3, [r7, #68]	; 0x44
 8002816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800281a:	643b      	str	r3, [r7, #64]	; 0x40
 800281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002824:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800282c:	63ba      	str	r2, [r7, #56]	; 0x38
 800282e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002830:	fa92 f2a2 	rbit	r2, r2
 8002834:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	f002 021f 	and.w	r2, r2, #31
 8002848:	2101      	movs	r1, #1
 800284a:	fa01 f202 	lsl.w	r2, r1, r2
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d13a      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b2      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
 8002858:	2302      	movs	r3, #2
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	095b      	lsrs	r3, r3, #5
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b01      	cmp	r3, #1
 8002878:	d102      	bne.n	8002880 <HAL_RCC_ClockConfig+0x1a0>
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	e00d      	b.n	800289c <HAL_RCC_ClockConfig+0x1bc>
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
 800288c:	2302      	movs	r3, #2
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	fa93 f3a3 	rbit	r3, r3
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	2202      	movs	r2, #2
 800289e:	61ba      	str	r2, [r7, #24]
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	fa92 f2a2 	rbit	r2, r2
 80028a6:	617a      	str	r2, [r7, #20]
  return result;
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	fab2 f282 	clz	r2, r2
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	f042 0220 	orr.w	r2, r2, #32
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	f002 021f 	and.w	r2, r2, #31
 80028ba:	2101      	movs	r1, #1
 80028bc:	fa01 f202 	lsl.w	r2, r1, r2
 80028c0:	4013      	ands	r3, r2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e079      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	491a      	ldr	r1, [pc, #104]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028dc:	f7fe fba4 	bl	8001028 <HAL_GetTick>
 80028e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e4:	f7fe fba0 	bl	8001028 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e061      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	4b11      	ldr	r3, [pc, #68]	; (8002940 <HAL_RCC_ClockConfig+0x260>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f003 020c 	and.w	r2, r3, #12
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d1eb      	bne.n	80028e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d214      	bcs.n	8002944 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b08      	ldr	r3, [pc, #32]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 0207 	bic.w	r2, r3, #7
 8002922:	4906      	ldr	r1, [pc, #24]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b04      	ldr	r3, [pc, #16]	; (800293c <HAL_RCC_ClockConfig+0x25c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e040      	b.n	80029be <HAL_RCC_ClockConfig+0x2de>
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b00      	cmp	r3, #0
 800294e:	d008      	beq.n	8002962 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	491a      	ldr	r1, [pc, #104]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800295e:	4313      	orrs	r3, r2
 8002960:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4912      	ldr	r1, [pc, #72]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002982:	f000 f829 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8002986:	4601      	mov	r1, r0
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_RCC_ClockConfig+0x2e8>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002990:	22f0      	movs	r2, #240	; 0xf0
 8002992:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	fa92 f2a2 	rbit	r2, r2
 800299a:	60fa      	str	r2, [r7, #12]
  return result;
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	fab2 f282 	clz	r2, r2
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	40d3      	lsrs	r3, r2
 80029a6:	4a09      	ldr	r2, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x2ec>)
 80029a8:	5cd3      	ldrb	r3, [r2, r3]
 80029aa:	fa21 f303 	lsr.w	r3, r1, r3
 80029ae:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_RCC_ClockConfig+0x2f0>)
 80029b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <HAL_RCC_ClockConfig+0x2f4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa14 	bl	8000de4 <HAL_InitTick>
  
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3778      	adds	r7, #120	; 0x78
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	08007814 	.word	0x08007814
 80029d0:	200000a0 	.word	0x200000a0
 80029d4:	200000a4 	.word	0x200000a4

080029d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	b08b      	sub	sp, #44	; 0x2c
 80029dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	2300      	movs	r3, #0
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ea:	2300      	movs	r3, #0
 80029ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d002      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x30>
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d003      	beq.n	8002a0e <HAL_RCC_GetSysClockFreq+0x36>
 8002a06:	e03f      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a0a:	623b      	str	r3, [r7, #32]
      break;
 8002a0c:	e03f      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002a18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	fa92 f2a2 	rbit	r2, r2
 8002a20:	607a      	str	r2, [r7, #4]
  return result;
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	fab2 f282 	clz	r2, r2
 8002a28:	b2d2      	uxtb	r2, r2
 8002a2a:	40d3      	lsrs	r3, r2
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002a2e:	5cd3      	ldrb	r3, [r2, r3]
 8002a30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	220f      	movs	r2, #15
 8002a3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	fa92 f2a2 	rbit	r2, r2
 8002a44:	60fa      	str	r2, [r7, #12]
  return result;
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	fab2 f282 	clz	r2, r2
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	40d3      	lsrs	r3, r2
 8002a50:	4a15      	ldr	r2, [pc, #84]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d008      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a60:	4a0f      	ldr	r2, [pc, #60]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	e007      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	623b      	str	r3, [r7, #32]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002a8a:	623b      	str	r3, [r7, #32]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	372c      	adds	r7, #44	; 0x2c
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	0800782c 	.word	0x0800782c
 8002aa8:	0800783c 	.word	0x0800783c

08002aac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	200000a0 	.word	0x200000a0

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002aca:	f7ff ffef 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ad8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002adc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fa92 f2a2 	rbit	r2, r2
 8002ae4:	603a      	str	r2, [r7, #0]
  return result;
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	fab2 f282 	clz	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	40d3      	lsrs	r3, r2
 8002af0:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002af2:	5cd3      	ldrb	r3, [r2, r3]
 8002af4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40021000 	.word	0x40021000
 8002b04:	08007824 	.word	0x08007824

08002b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002b0e:	f7ff ffcd 	bl	8002aac <HAL_RCC_GetHCLKFreq>
 8002b12:	4601      	mov	r1, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002b1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002b20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	fa92 f2a2 	rbit	r2, r2
 8002b28:	603a      	str	r2, [r7, #0]
  return result;
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	40d3      	lsrs	r3, r2
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002b36:	5cd3      	ldrb	r3, [r2, r3]
 8002b38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3708      	adds	r7, #8
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	08007824 	.word	0x08007824

08002b4c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	220f      	movs	r2, #15
 8002b5a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002b68:	4b0f      	ldr	r3, [pc, #60]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002b74:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <HAL_RCC_GetClockConfig+0x60>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0207 	and.w	r2, r3, #7
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40022000 	.word	0x40022000

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b092      	sub	sp, #72	; 0x48
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80d4 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10e      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a4a      	ldr	r2, [pc, #296]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
 8002bec:	4b48      	ldr	r3, [pc, #288]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfe:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d118      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0a:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c16:	f7fe fa07 	bl	8001028 <HAL_GetTick>
 8002c1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1c:	e008      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1e:	f7fe fa03 	bl	8001028 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b64      	cmp	r3, #100	; 0x64
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e1d6      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c30:	4b38      	ldr	r3, [pc, #224]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f0      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3c:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 8084 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d07c      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c5c:	4b2c      	ldr	r3, [pc, #176]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	fab3 f383 	clz	r3, r3
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	461a      	mov	r2, r3
 8002c86:	2301      	movs	r3, #1
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c9a:	fab3 f383 	clz	r3, r3
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ca4:	4413      	add	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	461a      	mov	r2, r3
 8002caa:	2300      	movs	r3, #0
 8002cac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d04b      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7fe f9b3 	bl	8001028 <HAL_GetTick>
 8002cc2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc4:	e00a      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc6:	f7fe f9af 	bl	8001028 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d901      	bls.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e180      	b.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	2302      	movs	r3, #2
 8002cea:	623b      	str	r3, [r7, #32]
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	fa93 f3a3 	rbit	r3, r3
 8002cf2:	61fb      	str	r3, [r7, #28]
  return result;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cf6:	fab3 f383 	clz	r3, r3
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f043 0302 	orr.w	r3, r3, #2
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d108      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d0a:	4b01      	ldr	r3, [pc, #4]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	e00d      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
 8002d18:	10908100 	.word	0x10908100
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b9a      	ldr	r3, [pc, #616]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	613a      	str	r2, [r7, #16]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	fa92 f2a2 	rbit	r2, r2
 8002d36:	60fa      	str	r2, [r7, #12]
  return result;
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	fab2 f282 	clz	r2, r2
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f002 021f 	and.w	r2, r2, #31
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0b7      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d56:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	498c      	ldr	r1, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d70:	4b88      	ldr	r3, [pc, #544]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a87      	ldr	r2, [pc, #540]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d88:	4b82      	ldr	r3, [pc, #520]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	f023 0203 	bic.w	r2, r3, #3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	497f      	ldr	r1, [pc, #508]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002da6:	4b7b      	ldr	r3, [pc, #492]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002daa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	4978      	ldr	r1, [pc, #480]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dc4:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	4970      	ldr	r1, [pc, #448]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de2:	4b6c      	ldr	r3, [pc, #432]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f023 0210 	bic.w	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4969      	ldr	r1, [pc, #420]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e00:	4b64      	ldr	r3, [pc, #400]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e0c:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d008      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f023 0220 	bic.w	r2, r3, #32
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	495a      	ldr	r1, [pc, #360]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e3c:	4b55      	ldr	r3, [pc, #340]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	4952      	ldr	r1, [pc, #328]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e5a:	4b4e      	ldr	r3, [pc, #312]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	494b      	ldr	r1, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e78:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	4943      	ldr	r1, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e96:	4b3f      	ldr	r3, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	493c      	ldr	r1, [pc, #240]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eb4:	4b37      	ldr	r3, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec0:	4934      	ldr	r1, [pc, #208]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002ed2:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ede:	492d      	ldr	r1, [pc, #180]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d008      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ef0:	4b28      	ldr	r3, [pc, #160]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	4925      	ldr	r1, [pc, #148]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f0e:	4b21      	ldr	r3, [pc, #132]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	491e      	ldr	r1, [pc, #120]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d008      	beq.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f56:	490f      	ldr	r1, [pc, #60]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d008      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f74:	4907      	ldr	r1, [pc, #28]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00c      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f86:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	e002      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9a:	4913      	ldr	r1, [pc, #76]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fac:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb8:	490b      	ldr	r1, [pc, #44]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd6:	4904      	ldr	r1, [pc, #16]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3748      	adds	r7, #72	; 0x48
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e049      	b.n	8003092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f841 	bl	800309a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 f9f8 	bl	8003420 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d001      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04f      	b.n	8003168 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <HAL_TIM_Base_Start_IT+0xc4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01d      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f2:	d018      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1f      	ldr	r2, [pc, #124]	; (8003178 <HAL_TIM_Base_Start_IT+0xc8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a1e      	ldr	r2, [pc, #120]	; (800317c <HAL_TIM_Base_Start_IT+0xcc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_TIM_Base_Start_IT+0xd0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_TIM_Base_Start_IT+0xd4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIM_Base_Start_IT+0x76>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a19      	ldr	r2, [pc, #100]	; (8003188 <HAL_TIM_Base_Start_IT+0xd8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d115      	bne.n	8003152 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_TIM_Base_Start_IT+0xdc>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d015      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0xb4>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d011      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	e008      	b.n	8003164 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e000      	b.n	8003166 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	40012c00 	.word	0x40012c00
 8003178:	40000400 	.word	0x40000400
 800317c:	40000800 	.word	0x40000800
 8003180:	40013400 	.word	0x40013400
 8003184:	40014000 	.word	0x40014000
 8003188:	40015000 	.word	0x40015000
 800318c:	00010007 	.word	0x00010007

08003190 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0202 	mvn.w	r2, #2
 80031bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f905 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8f7 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f908 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b04      	cmp	r3, #4
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0204 	mvn.w	r2, #4
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f8db 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8cd 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f8de 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b08      	cmp	r3, #8
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b08      	cmp	r3, #8
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0208 	mvn.w	r2, #8
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f8b1 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8a3 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f8b4 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	2b10      	cmp	r3, #16
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0210 	mvn.w	r2, #16
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2208      	movs	r2, #8
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f887 	bl	80033e2 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f879 	bl	80033ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f88a 	bl	80033f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d10e      	bne.n	8003314 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d107      	bne.n	8003314 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0201 	mvn.w	r2, #1
 800330c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fc84 	bl	8000c1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331e:	2b80      	cmp	r3, #128	; 0x80
 8003320:	d10e      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332c:	2b80      	cmp	r3, #128	; 0x80
 800332e:	d107      	bne.n	8003340 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f918 	bl	8003570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800334e:	d10e      	bne.n	800336e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800335a:	2b80      	cmp	r3, #128	; 0x80
 800335c:	d107      	bne.n	800336e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f90b 	bl	8003584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d10e      	bne.n	800339a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b40      	cmp	r3, #64	; 0x40
 8003388:	d107      	bne.n	800339a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003392:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f838 	bl	800340a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b20      	cmp	r3, #32
 80033a6:	d10e      	bne.n	80033c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d107      	bne.n	80033c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f06f 0220 	mvn.w	r2, #32
 80033be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8cb 	bl	800355c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033c6:	bf00      	nop
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ce:	b480      	push	{r7}
 80033d0:	b083      	sub	sp, #12
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a42      	ldr	r2, [pc, #264]	; (800353c <TIM_Base_SetConfig+0x11c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3f      	ldr	r2, [pc, #252]	; (8003540 <TIM_Base_SetConfig+0x120>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3e      	ldr	r2, [pc, #248]	; (8003544 <TIM_Base_SetConfig+0x124>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3d      	ldr	r2, [pc, #244]	; (8003548 <TIM_Base_SetConfig+0x128>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a3c      	ldr	r2, [pc, #240]	; (800354c <TIM_Base_SetConfig+0x12c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a31      	ldr	r2, [pc, #196]	; (800353c <TIM_Base_SetConfig+0x11c>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d01f      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003480:	d01b      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <TIM_Base_SetConfig+0x120>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d017      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <TIM_Base_SetConfig+0x124>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2c      	ldr	r2, [pc, #176]	; (8003548 <TIM_Base_SetConfig+0x128>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d00f      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2c      	ldr	r2, [pc, #176]	; (8003550 <TIM_Base_SetConfig+0x130>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00b      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <TIM_Base_SetConfig+0x134>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2a      	ldr	r2, [pc, #168]	; (8003558 <TIM_Base_SetConfig+0x138>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d003      	beq.n	80034ba <TIM_Base_SetConfig+0x9a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a25      	ldr	r2, [pc, #148]	; (800354c <TIM_Base_SetConfig+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d108      	bne.n	80034cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <TIM_Base_SetConfig+0x11c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d013      	beq.n	8003520 <TIM_Base_SetConfig+0x100>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <TIM_Base_SetConfig+0x128>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00f      	beq.n	8003520 <TIM_Base_SetConfig+0x100>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a13      	ldr	r2, [pc, #76]	; (8003550 <TIM_Base_SetConfig+0x130>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00b      	beq.n	8003520 <TIM_Base_SetConfig+0x100>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <TIM_Base_SetConfig+0x134>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_Base_SetConfig+0x100>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <TIM_Base_SetConfig+0x138>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_Base_SetConfig+0x100>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a0c      	ldr	r2, [pc, #48]	; (800354c <TIM_Base_SetConfig+0x12c>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	615a      	str	r2, [r3, #20]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40013400 	.word	0x40013400
 800354c:	40015000 	.word	0x40015000
 8003550:	40014000 	.word	0x40014000
 8003554:	40014400 	.word	0x40014400
 8003558:	40014800 	.word	0x40014800

0800355c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e040      	b.n	800362c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d106      	bne.n	80035c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fb6e 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2224      	movs	r2, #36	; 0x24
 80035c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 0201 	bic.w	r2, r2, #1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fbba 	bl	8003d50 <UART_SetConfig>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fd82 	bl	80040f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fe09 	bl	800423c <UART_CheckIdleState>
 800362a:	4603      	mov	r3, r0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af02      	add	r7, sp, #8
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	4613      	mov	r3, r2
 8003642:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003648:	2b20      	cmp	r3, #32
 800364a:	d178      	bne.n	800373e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_UART_Transmit+0x24>
 8003652:	88fb      	ldrh	r3, [r7, #6]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e071      	b.n	8003740 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2221      	movs	r2, #33	; 0x21
 8003668:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800366a:	f7fd fcdd 	bl	8001028 <HAL_GetTick>
 800366e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d108      	bne.n	800369c <HAL_UART_Transmit+0x68>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d104      	bne.n	800369c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	e003      	b.n	80036a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036a4:	e030      	b.n	8003708 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2200      	movs	r2, #0
 80036ae:	2180      	movs	r1, #128	; 0x80
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 fe6b 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d004      	beq.n	80036c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e03c      	b.n	8003740 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10b      	bne.n	80036e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	b292      	uxth	r2, r2
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	3302      	adds	r3, #2
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e008      	b.n	80036f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	b292      	uxth	r2, r2
 80036ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3301      	adds	r3, #1
 80036f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3b01      	subs	r3, #1
 8003700:	b29a      	uxth	r2, r3
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1c8      	bne.n	80036a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2200      	movs	r2, #0
 800371c:	2140      	movs	r1, #64	; 0x40
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fe34 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e005      	b.n	8003740 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3720      	adds	r7, #32
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b0ba      	sub	sp, #232	; 0xe8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800376e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003772:	f640 030f 	movw	r3, #2063	; 0x80f
 8003776:	4013      	ands	r3, r2
 8003778:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800377c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d115      	bne.n	80037b0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00f      	beq.n	80037b0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 82ab 	beq.w	8003cfc <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	4798      	blx	r3
      }
      return;
 80037ae:	e2a5      	b.n	8003cfc <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8117 	beq.w	80039e8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d106      	bne.n	80037d4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037ca:	4b85      	ldr	r3, [pc, #532]	; (80039e0 <HAL_UART_IRQHandler+0x298>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 810a 	beq.w	80039e8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d011      	beq.n	8003804 <HAL_UART_IRQHandler+0xbc>
 80037e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2201      	movs	r2, #1
 80037f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037fa:	f043 0201 	orr.w	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_UART_IRQHandler+0xec>
 8003810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00b      	beq.n	8003834 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2202      	movs	r2, #2
 8003822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800382a:	f043 0204 	orr.w	r2, r3, #4
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d011      	beq.n	8003864 <HAL_UART_IRQHandler+0x11c>
 8003840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2204      	movs	r2, #4
 8003852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d017      	beq.n	80038a0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800387c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003880:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2208      	movs	r2, #8
 800388e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003896:	f043 0208 	orr.w	r2, r3, #8
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d012      	beq.n	80038d2 <HAL_UART_IRQHandler+0x18a>
 80038ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00c      	beq.n	80038d2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f000 8211 	beq.w	8003d00 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e2:	f003 0320 	and.w	r3, r3, #32
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038ee:	f003 0320 	and.w	r3, r3, #32
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391a:	2b40      	cmp	r3, #64	; 0x40
 800391c:	d005      	beq.n	800392a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800391e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d04f      	beq.n	80039ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fe5c 	bl	80045e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d141      	bne.n	80039c2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800395c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800396a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800396e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1d9      	bne.n	800393e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398e:	2b00      	cmp	r3, #0
 8003990:	d013      	beq.n	80039ba <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003996:	4a13      	ldr	r2, [pc, #76]	; (80039e4 <HAL_UART_IRQHandler+0x29c>)
 8003998:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fc69 	bl	8001276 <HAL_DMA_Abort_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d017      	beq.n	80039da <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039b4:	4610      	mov	r0, r2
 80039b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e00f      	b.n	80039da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f9be 	bl	8003d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c0:	e00b      	b.n	80039da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9ba 	bl	8003d3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039c8:	e007      	b.n	80039da <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 f9b6 	bl	8003d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80039d8:	e192      	b.n	8003d00 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039da:	bf00      	nop
    return;
 80039dc:	e190      	b.n	8003d00 <HAL_UART_IRQHandler+0x5b8>
 80039de:	bf00      	nop
 80039e0:	04000120 	.word	0x04000120
 80039e4:	080046b1 	.word	0x080046b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	f040 814b 	bne.w	8003c88 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039f6:	f003 0310 	and.w	r3, r3, #16
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	f000 8144 	beq.w	8003c88 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a04:	f003 0310 	and.w	r3, r3, #16
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 813d 	beq.w	8003c88 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2210      	movs	r2, #16
 8003a14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a20:	2b40      	cmp	r3, #64	; 0x40
 8003a22:	f040 80b5 	bne.w	8003b90 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a32:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8164 	beq.w	8003d04 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a46:	429a      	cmp	r2, r3
 8003a48:	f080 815c 	bcs.w	8003d04 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	f000 8086 	beq.w	8003b6e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a90:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1da      	bne.n	8003a62 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3308      	adds	r3, #8
 8003acc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ad0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003ad8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e1      	bne.n	8003aac <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	3308      	adds	r3, #8
 8003b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e3      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b3e:	f023 0310 	bic.w	r3, r3, #16
 8003b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b50:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b52:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e4      	bne.n	8003b2e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fb4b 	bl	8001204 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2202      	movs	r2, #2
 8003b72:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	4619      	mov	r1, r3
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7fc fccb 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b8e:	e0b9      	b.n	8003d04 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 80ab 	beq.w	8003d08 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003bb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f000 80a6 	beq.w	8003d08 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc4:	e853 3f00 	ldrex	r3, [r3]
 8003bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bde:	647b      	str	r3, [r7, #68]	; 0x44
 8003be0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	623b      	str	r3, [r7, #32]
   return(result);
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3308      	adds	r3, #8
 8003c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c16:	633a      	str	r2, [r7, #48]	; 0x30
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e3      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	e853 3f00 	ldrex	r3, [r3]
 8003c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0310 	bic.w	r3, r3, #16
 8003c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	69b9      	ldr	r1, [r7, #24]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e4      	bne.n	8003c3e <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fc fc4f 	bl	8000524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c86:	e03f      	b.n	8003d08 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003c88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00e      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x56a>
 8003c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ca8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fee8 	bl	8004a80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cb0:	e02d      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00e      	beq.n	8003cdc <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01c      	beq.n	8003d0c <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	4798      	blx	r3
    }
    return;
 8003cda:	e017      	b.n	8003d0c <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d012      	beq.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
 8003ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00c      	beq.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fcf1 	bl	80046dc <UART_EndTransmit_IT>
    return;
 8003cfa:	e008      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003cfc:	bf00      	nop
 8003cfe:	e006      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d00:	bf00      	nop
 8003d02:	e004      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d04:	bf00      	nop
 8003d06:	e002      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
      return;
 8003d08:	bf00      	nop
 8003d0a:	e000      	b.n	8003d0e <HAL_UART_IRQHandler+0x5c6>
    return;
 8003d0c:	bf00      	nop
  }

}
 8003d0e:	37e8      	adds	r7, #232	; 0xe8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b92      	ldr	r3, [pc, #584]	; (8003fc4 <UART_SetConfig+0x274>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	6979      	ldr	r1, [r7, #20]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	697a      	ldr	r2, [r7, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a80      	ldr	r2, [pc, #512]	; (8003fc8 <UART_SetConfig+0x278>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d120      	bne.n	8003e0e <UART_SetConfig+0xbe>
 8003dcc:	4b7f      	ldr	r3, [pc, #508]	; (8003fcc <UART_SetConfig+0x27c>)
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d817      	bhi.n	8003e08 <UART_SetConfig+0xb8>
 8003dd8:	a201      	add	r2, pc, #4	; (adr r2, 8003de0 <UART_SetConfig+0x90>)
 8003dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dde:	bf00      	nop
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003dfd 	.word	0x08003dfd
 8003de8:	08003e03 	.word	0x08003e03
 8003dec:	08003df7 	.word	0x08003df7
 8003df0:	2301      	movs	r3, #1
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e0b5      	b.n	8003f62 <UART_SetConfig+0x212>
 8003df6:	2302      	movs	r3, #2
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e0b2      	b.n	8003f62 <UART_SetConfig+0x212>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e0af      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e02:	2308      	movs	r3, #8
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e0ac      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e0a9      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6f      	ldr	r2, [pc, #444]	; (8003fd0 <UART_SetConfig+0x280>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d124      	bne.n	8003e62 <UART_SetConfig+0x112>
 8003e18:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <UART_SetConfig+0x27c>)
 8003e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e24:	d011      	beq.n	8003e4a <UART_SetConfig+0xfa>
 8003e26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e2a:	d817      	bhi.n	8003e5c <UART_SetConfig+0x10c>
 8003e2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e30:	d011      	beq.n	8003e56 <UART_SetConfig+0x106>
 8003e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e36:	d811      	bhi.n	8003e5c <UART_SetConfig+0x10c>
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <UART_SetConfig+0xf4>
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d006      	beq.n	8003e50 <UART_SetConfig+0x100>
 8003e42:	e00b      	b.n	8003e5c <UART_SetConfig+0x10c>
 8003e44:	2300      	movs	r3, #0
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e08b      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e088      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e50:	2304      	movs	r3, #4
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e085      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e56:	2308      	movs	r3, #8
 8003e58:	77fb      	strb	r3, [r7, #31]
 8003e5a:	e082      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	77fb      	strb	r3, [r7, #31]
 8003e60:	e07f      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5b      	ldr	r2, [pc, #364]	; (8003fd4 <UART_SetConfig+0x284>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d124      	bne.n	8003eb6 <UART_SetConfig+0x166>
 8003e6c:	4b57      	ldr	r3, [pc, #348]	; (8003fcc <UART_SetConfig+0x27c>)
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e78:	d011      	beq.n	8003e9e <UART_SetConfig+0x14e>
 8003e7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e7e:	d817      	bhi.n	8003eb0 <UART_SetConfig+0x160>
 8003e80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e84:	d011      	beq.n	8003eaa <UART_SetConfig+0x15a>
 8003e86:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e8a:	d811      	bhi.n	8003eb0 <UART_SetConfig+0x160>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <UART_SetConfig+0x148>
 8003e90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e94:	d006      	beq.n	8003ea4 <UART_SetConfig+0x154>
 8003e96:	e00b      	b.n	8003eb0 <UART_SetConfig+0x160>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	77fb      	strb	r3, [r7, #31]
 8003e9c:	e061      	b.n	8003f62 <UART_SetConfig+0x212>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	77fb      	strb	r3, [r7, #31]
 8003ea2:	e05e      	b.n	8003f62 <UART_SetConfig+0x212>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	e05b      	b.n	8003f62 <UART_SetConfig+0x212>
 8003eaa:	2308      	movs	r3, #8
 8003eac:	77fb      	strb	r3, [r7, #31]
 8003eae:	e058      	b.n	8003f62 <UART_SetConfig+0x212>
 8003eb0:	2310      	movs	r3, #16
 8003eb2:	77fb      	strb	r3, [r7, #31]
 8003eb4:	e055      	b.n	8003f62 <UART_SetConfig+0x212>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a47      	ldr	r2, [pc, #284]	; (8003fd8 <UART_SetConfig+0x288>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d124      	bne.n	8003f0a <UART_SetConfig+0x1ba>
 8003ec0:	4b42      	ldr	r3, [pc, #264]	; (8003fcc <UART_SetConfig+0x27c>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ecc:	d011      	beq.n	8003ef2 <UART_SetConfig+0x1a2>
 8003ece:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ed2:	d817      	bhi.n	8003f04 <UART_SetConfig+0x1b4>
 8003ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed8:	d011      	beq.n	8003efe <UART_SetConfig+0x1ae>
 8003eda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ede:	d811      	bhi.n	8003f04 <UART_SetConfig+0x1b4>
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <UART_SetConfig+0x19c>
 8003ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ee8:	d006      	beq.n	8003ef8 <UART_SetConfig+0x1a8>
 8003eea:	e00b      	b.n	8003f04 <UART_SetConfig+0x1b4>
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e037      	b.n	8003f62 <UART_SetConfig+0x212>
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	77fb      	strb	r3, [r7, #31]
 8003ef6:	e034      	b.n	8003f62 <UART_SetConfig+0x212>
 8003ef8:	2304      	movs	r3, #4
 8003efa:	77fb      	strb	r3, [r7, #31]
 8003efc:	e031      	b.n	8003f62 <UART_SetConfig+0x212>
 8003efe:	2308      	movs	r3, #8
 8003f00:	77fb      	strb	r3, [r7, #31]
 8003f02:	e02e      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f04:	2310      	movs	r3, #16
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e02b      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a33      	ldr	r2, [pc, #204]	; (8003fdc <UART_SetConfig+0x28c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d124      	bne.n	8003f5e <UART_SetConfig+0x20e>
 8003f14:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <UART_SetConfig+0x27c>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f20:	d011      	beq.n	8003f46 <UART_SetConfig+0x1f6>
 8003f22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f26:	d817      	bhi.n	8003f58 <UART_SetConfig+0x208>
 8003f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f2c:	d011      	beq.n	8003f52 <UART_SetConfig+0x202>
 8003f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f32:	d811      	bhi.n	8003f58 <UART_SetConfig+0x208>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <UART_SetConfig+0x1f0>
 8003f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f3c:	d006      	beq.n	8003f4c <UART_SetConfig+0x1fc>
 8003f3e:	e00b      	b.n	8003f58 <UART_SetConfig+0x208>
 8003f40:	2300      	movs	r3, #0
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e00d      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f46:	2302      	movs	r3, #2
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e00a      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e007      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f52:	2308      	movs	r3, #8
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e004      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e001      	b.n	8003f62 <UART_SetConfig+0x212>
 8003f5e:	2310      	movs	r3, #16
 8003f60:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d16b      	bne.n	8004044 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003f6c:	7ffb      	ldrb	r3, [r7, #31]
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d838      	bhi.n	8003fe4 <UART_SetConfig+0x294>
 8003f72:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x228>)
 8003f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fe5 	.word	0x08003fe5
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fe5 	.word	0x08003fe5
 8003f90:	08003fe5 	.word	0x08003fe5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fd92 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61b8      	str	r0, [r7, #24]
        break;
 8003fa2:	e024      	b.n	8003fee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe fdb0 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61b8      	str	r0, [r7, #24]
        break;
 8003faa:	e020      	b.n	8003fee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <UART_SetConfig+0x290>)
 8003fae:	61bb      	str	r3, [r7, #24]
        break;
 8003fb0:	e01d      	b.n	8003fee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe fd11 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61b8      	str	r0, [r7, #24]
        break;
 8003fb8:	e019      	b.n	8003fee <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbe:	61bb      	str	r3, [r7, #24]
        break;
 8003fc0:	e015      	b.n	8003fee <UART_SetConfig+0x29e>
 8003fc2:	bf00      	nop
 8003fc4:	efff69f3 	.word	0xefff69f3
 8003fc8:	40013800 	.word	0x40013800
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40004400 	.word	0x40004400
 8003fd4:	40004800 	.word	0x40004800
 8003fd8:	40004c00 	.word	0x40004c00
 8003fdc:	40005000 	.word	0x40005000
 8003fe0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	77bb      	strb	r3, [r7, #30]
        break;
 8003fec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d073      	beq.n	80040dc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	005a      	lsls	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	441a      	add	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	fbb2 f3f3 	udiv	r3, r2, r3
 8004008:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d916      	bls.n	800403e <UART_SetConfig+0x2ee>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004016:	d212      	bcs.n	800403e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f023 030f 	bic.w	r3, r3, #15
 8004020:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	b29b      	uxth	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	b29a      	uxth	r2, r3
 800402e:	89fb      	ldrh	r3, [r7, #14]
 8004030:	4313      	orrs	r3, r2
 8004032:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	89fa      	ldrh	r2, [r7, #14]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e04e      	b.n	80040dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	77bb      	strb	r3, [r7, #30]
 8004042:	e04b      	b.n	80040dc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004044:	7ffb      	ldrb	r3, [r7, #31]
 8004046:	2b08      	cmp	r3, #8
 8004048:	d827      	bhi.n	800409a <UART_SetConfig+0x34a>
 800404a:	a201      	add	r2, pc, #4	; (adr r2, 8004050 <UART_SetConfig+0x300>)
 800404c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004050:	08004075 	.word	0x08004075
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004085 	.word	0x08004085
 800405c:	0800409b 	.word	0x0800409b
 8004060:	0800408b 	.word	0x0800408b
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
 8004070:	08004093 	.word	0x08004093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe fd26 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8004078:	61b8      	str	r0, [r7, #24]
        break;
 800407a:	e013      	b.n	80040a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800407c:	f7fe fd44 	bl	8002b08 <HAL_RCC_GetPCLK2Freq>
 8004080:	61b8      	str	r0, [r7, #24]
        break;
 8004082:	e00f      	b.n	80040a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <UART_SetConfig+0x3a4>)
 8004086:	61bb      	str	r3, [r7, #24]
        break;
 8004088:	e00c      	b.n	80040a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800408a:	f7fe fca5 	bl	80029d8 <HAL_RCC_GetSysClockFreq>
 800408e:	61b8      	str	r0, [r7, #24]
        break;
 8004090:	e008      	b.n	80040a4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004092:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004096:	61bb      	str	r3, [r7, #24]
        break;
 8004098:	e004      	b.n	80040a4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800409a:	2300      	movs	r3, #0
 800409c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	77bb      	strb	r3, [r7, #30]
        break;
 80040a2:	bf00      	nop
    }

    if (pclk != 0U)
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d018      	beq.n	80040dc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	085a      	lsrs	r2, r3, #1
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	2b0f      	cmp	r3, #15
 80040c2:	d909      	bls.n	80040d8 <UART_SetConfig+0x388>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ca:	d205      	bcs.n	80040d8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	60da      	str	r2, [r3, #12]
 80040d6:	e001      	b.n	80040dc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	007a1200 	.word	0x007a1200

080040f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f6:	d10a      	bne.n	800420e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b098      	sub	sp, #96	; 0x60
 8004240:	af02      	add	r7, sp, #8
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800424c:	f7fc feec 	bl	8001028 <HAL_GetTick>
 8004250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d12e      	bne.n	80042be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	2200      	movs	r2, #0
 800426a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f88c 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d021      	beq.n	80042be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	653b      	str	r3, [r7, #80]	; 0x50
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
 800429a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800429e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e6      	bne.n	800427a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e062      	b.n	8004384 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d149      	bne.n	8004360 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	2200      	movs	r2, #0
 80042d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f856 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d03c      	beq.n	8004360 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	623b      	str	r3, [r7, #32]
   return(result);
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e6      	bne.n	80042e6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60fb      	str	r3, [r7, #12]
   return(result);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004338:	61fa      	str	r2, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e011      	b.n	8004384 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3758      	adds	r7, #88	; 0x58
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	e049      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d045      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fc fe3f 	bl	8001028 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <UART_WaitOnFlagUntilTimeout+0x30>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e048      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d031      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d110      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f8ff 	bl	80045e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e029      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d111      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f8e5 	bl	80045e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d0a6      	beq.n	800439e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800445c:	b480      	push	{r7}
 800445e:	b097      	sub	sp, #92	; 0x5c
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	88fa      	ldrh	r2, [r7, #6]
 8004474:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	88fa      	ldrh	r2, [r7, #6]
 800447c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d10e      	bne.n	80044ae <UART_Start_Receive_IT+0x52>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <UART_Start_Receive_IT+0x48>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800449e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044a2:	e02d      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	22ff      	movs	r2, #255	; 0xff
 80044a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ac:	e028      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <UART_Start_Receive_IT+0x76>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <UART_Start_Receive_IT+0x6c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044c6:	e01b      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	227f      	movs	r2, #127	; 0x7f
 80044cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044d0:	e016      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044da:	d10d      	bne.n	80044f8 <UART_Start_Receive_IT+0x9c>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <UART_Start_Receive_IT+0x92>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	227f      	movs	r2, #127	; 0x7f
 80044e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044ec:	e008      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	223f      	movs	r2, #63	; 0x3f
 80044f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80044f6:	e003      	b.n	8004500 <UART_Start_Receive_IT+0xa4>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2222      	movs	r2, #34	; 0x22
 800450c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451a:	e853 3f00 	ldrex	r3, [r3]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	657b      	str	r3, [r7, #84]	; 0x54
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004530:	64ba      	str	r2, [r7, #72]	; 0x48
 8004532:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004534:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004538:	e841 2300 	strex	r3, r2, [r1]
 800453c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e5      	bne.n	8004510 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d107      	bne.n	800455e <UART_Start_Receive_IT+0x102>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <UART_Start_Receive_IT+0x184>)
 800455a:	669a      	str	r2, [r3, #104]	; 0x68
 800455c:	e002      	b.n	8004564 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <UART_Start_Receive_IT+0x188>)
 8004562:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d019      	beq.n	80045a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004580:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
 800458c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e6      	bne.n	800456c <UART_Start_Receive_IT+0x110>
 800459e:	e018      	b.n	80045d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	e853 3f00 	ldrex	r3, [r3]
 80045ac:	613b      	str	r3, [r7, #16]
   return(result);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f043 0320 	orr.w	r3, r3, #32
 80045b4:	653b      	str	r3, [r7, #80]	; 0x50
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c2:	69f9      	ldr	r1, [r7, #28]
 80045c4:	6a3a      	ldr	r2, [r7, #32]
 80045c6:	e841 2300 	strex	r3, r2, [r1]
 80045ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1e6      	bne.n	80045a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	375c      	adds	r7, #92	; 0x5c
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	080048d9 	.word	0x080048d9
 80045e4:	08004731 	.word	0x08004731

080045e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b095      	sub	sp, #84	; 0x54
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	643b      	str	r3, [r7, #64]	; 0x40
 8004610:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004612:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004614:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004616:	e841 2300 	strex	r3, r2, [r1]
 800461a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1e6      	bne.n	80045f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	e853 3f00 	ldrex	r3, [r3]
 8004630:	61fb      	str	r3, [r7, #28]
   return(result);
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	64bb      	str	r3, [r7, #72]	; 0x48
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004642:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004646:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800464a:	e841 2300 	strex	r3, r2, [r1]
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1e5      	bne.n	8004622 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800465a:	2b01      	cmp	r3, #1
 800465c:	d118      	bne.n	8004690 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	e853 3f00 	ldrex	r3, [r3]
 800466a:	60bb      	str	r3, [r7, #8]
   return(result);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f023 0310 	bic.w	r3, r3, #16
 8004672:	647b      	str	r3, [r7, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800467c:	61bb      	str	r3, [r7, #24]
 800467e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6979      	ldr	r1, [r7, #20]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	613b      	str	r3, [r7, #16]
   return(result);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e6      	bne.n	800465e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80046a4:	bf00      	nop
 80046a6:	3754      	adds	r7, #84	; 0x54
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fb34 	bl	8003d3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046d4:	bf00      	nop
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	613b      	str	r3, [r7, #16]
   return(result);
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff faf6 	bl	8003d14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004728:	bf00      	nop
 800472a:	3720      	adds	r7, #32
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b09c      	sub	sp, #112	; 0x70
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800473e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	f040 80b9 	bne.w	80048c0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004754:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004758:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800475c:	b2d9      	uxtb	r1, r3
 800475e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	400a      	ands	r2, r1
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	f040 809c 	bne.w	80048d0 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a0:	e853 3f00 	ldrex	r3, [r3]
 80047a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	461a      	mov	r2, r3
 80047b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047be:	e841 2300 	strex	r3, r2, [r1]
 80047c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1e6      	bne.n	8004798 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	3308      	adds	r3, #8
 80047d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d4:	e853 3f00 	ldrex	r3, [r3]
 80047d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047dc:	f023 0301 	bic.w	r3, r3, #1
 80047e0:	667b      	str	r3, [r7, #100]	; 0x64
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80047ea:	647a      	str	r2, [r7, #68]	; 0x44
 80047ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047f2:	e841 2300 	strex	r3, r2, [r1]
 80047f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1e5      	bne.n	80047ca <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d018      	beq.n	8004852 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	623b      	str	r3, [r7, #32]
   return(result);
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004834:	663b      	str	r3, [r7, #96]	; 0x60
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
 8004840:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800484c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e6      	bne.n	8004820 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004856:	2b01      	cmp	r3, #1
 8004858:	d12e      	bne.n	80048b8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60fb      	str	r3, [r7, #12]
   return(result);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	69b9      	ldr	r1, [r7, #24]
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	617b      	str	r3, [r7, #20]
   return(result);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	f003 0310 	and.w	r3, r3, #16
 800489c:	2b10      	cmp	r3, #16
 800489e:	d103      	bne.n	80048a8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2210      	movs	r2, #16
 80048a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f7fb fe37 	bl	8000524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048b6:	e00b      	b.n	80048d0 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff fa35 	bl	8003d28 <HAL_UART_RxCpltCallback>
}
 80048be:	e007      	b.n	80048d0 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0208 	orr.w	r2, r2, #8
 80048ce:	619a      	str	r2, [r3, #24]
}
 80048d0:	bf00      	nop
 80048d2:	3770      	adds	r7, #112	; 0x70
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b09c      	sub	sp, #112	; 0x70
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048f0:	2b22      	cmp	r3, #34	; 0x22
 80048f2:	f040 80b9 	bne.w	8004a68 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048fc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004904:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004906:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800490a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800490e:	4013      	ands	r3, r2
 8004910:	b29a      	uxth	r2, r3
 8004912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004914:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491a:	1c9a      	adds	r2, r3, #2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 809c 	bne.w	8004a78 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800494e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004950:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004954:	667b      	str	r3, [r7, #100]	; 0x64
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800495e:	657b      	str	r3, [r7, #84]	; 0x54
 8004960:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004962:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004966:	e841 2300 	strex	r3, r2, [r1]
 800496a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800496c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d1e6      	bne.n	8004940 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3308      	adds	r3, #8
 8004978:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004984:	f023 0301 	bic.w	r3, r3, #1
 8004988:	663b      	str	r3, [r7, #96]	; 0x60
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	3308      	adds	r3, #8
 8004990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004992:	643a      	str	r2, [r7, #64]	; 0x40
 8004994:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004996:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004998:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800499a:	e841 2300 	strex	r3, r2, [r1]
 800499e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e5      	bne.n	8004972 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d018      	beq.n	80049fa <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	e853 3f00 	ldrex	r3, [r3]
 80049d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e6      	bne.n	80049c8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d12e      	bne.n	8004a60 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	e853 3f00 	ldrex	r3, [r3]
 8004a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f023 0310 	bic.w	r3, r3, #16
 8004a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	461a      	mov	r2, r3
 8004a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a26:	61bb      	str	r3, [r7, #24]
 8004a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	69ba      	ldr	r2, [r7, #24]
 8004a2e:	e841 2300 	strex	r3, r2, [r1]
 8004a32:	613b      	str	r3, [r7, #16]
   return(result);
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1e6      	bne.n	8004a08 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d103      	bne.n	8004a50 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2210      	movs	r2, #16
 8004a4e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fb fd63 	bl	8000524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a5e:	e00b      	b.n	8004a78 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff f961 	bl	8003d28 <HAL_UART_RxCpltCallback>
}
 8004a66:	e007      	b.n	8004a78 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]
}
 8004a78:	bf00      	nop
 8004a7a:	3770      	adds	r7, #112	; 0x70
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d142      	bne.n	8004b32 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e03b      	b.n	8004b34 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	461a      	mov	r2, r3
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff fcc4 	bl	800445c <UART_Start_Receive_IT>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d124      	bne.n	8004b2c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d11d      	bne.n	8004b26 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2210      	movs	r2, #16
 8004af0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	e853 3f00 	ldrex	r3, [r3]
 8004afe:	617b      	str	r3, [r7, #20]
   return(result);
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f043 0310 	orr.w	r3, r3, #16
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b10:	627b      	str	r3, [r7, #36]	; 0x24
 8004b12:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6a39      	ldr	r1, [r7, #32]
 8004b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e6      	bne.n	8004af2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 8004b24:	e002      	b.n	8004b2c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8004b2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004b30:	e000      	b.n	8004b34 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004b32:	2302      	movs	r3, #2
  }
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3730      	adds	r7, #48	; 0x30
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e016      	b.n	8004b7c <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fc f928 	bl	8000da4 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004b60:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	ea42 0103 	orr.w	r1, r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	430a      	orrs	r2, r1
 8004b78:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <HAL_WWDG_Refresh>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	68d2      	ldr	r2, [r2, #12]
 8004b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <LL_TIM_SetPrescaler>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <LL_TIM_SetAutoReload>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <LL_TIM_SetRepetitionCounter>:
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <LL_TIM_GenerateEvent_UPDATE>:
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	615a      	str	r2, [r3, #20]
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3f      	ldr	r2, [pc, #252]	; (8004d28 <LL_TIM_Init+0x110>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <LL_TIM_Init+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <LL_TIM_Init+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3c      	ldr	r2, [pc, #240]	; (8004d2c <LL_TIM_Init+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <LL_TIM_Init+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3b      	ldr	r2, [pc, #236]	; (8004d30 <LL_TIM_Init+0x118>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <LL_TIM_Init+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3a      	ldr	r2, [pc, #232]	; (8004d34 <LL_TIM_Init+0x11c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <LL_TIM_Init+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a39      	ldr	r2, [pc, #228]	; (8004d38 <LL_TIM_Init+0x120>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d106      	bne.n	8004c66 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2f      	ldr	r2, [pc, #188]	; (8004d28 <LL_TIM_Init+0x110>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d01b      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <LL_TIM_Init+0x114>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a2b      	ldr	r2, [pc, #172]	; (8004d30 <LL_TIM_Init+0x118>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a2a      	ldr	r2, [pc, #168]	; (8004d34 <LL_TIM_Init+0x11c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a2a      	ldr	r2, [pc, #168]	; (8004d3c <LL_TIM_Init+0x124>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a29      	ldr	r2, [pc, #164]	; (8004d40 <LL_TIM_Init+0x128>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a28      	ldr	r2, [pc, #160]	; (8004d44 <LL_TIM_Init+0x12c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <LL_TIM_Init+0x96>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <LL_TIM_Init+0x120>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d106      	bne.n	8004cbc <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff79 	bl	8004bc0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff ff65 	bl	8004ba4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a12      	ldr	r2, [pc, #72]	; (8004d28 <LL_TIM_Init+0x110>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <LL_TIM_Init+0xf2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <LL_TIM_Init+0x11c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <LL_TIM_Init+0xf2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <LL_TIM_Init+0x124>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <LL_TIM_Init+0xf2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a12      	ldr	r2, [pc, #72]	; (8004d40 <LL_TIM_Init+0x128>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <LL_TIM_Init+0xf2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <LL_TIM_Init+0x12c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <LL_TIM_Init+0xf2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a0c      	ldr	r2, [pc, #48]	; (8004d38 <LL_TIM_Init+0x120>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d105      	bne.n	8004d16 <LL_TIM_Init+0xfe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff63 	bl	8004bdc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff ff6e 	bl	8004bf8 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800
 8004d34:	40013400 	.word	0x40013400
 8004d38:	40015000 	.word	0x40015000
 8004d3c:	40014000 	.word	0x40014000
 8004d40:	40014400 	.word	0x40014400
 8004d44:	40014800 	.word	0x40014800

08004d48 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004d48:	b480      	push	{r7}
 8004d4a:	b085      	sub	sp, #20
 8004d4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d4e:	f3ef 8305 	mrs	r3, IPSR
 8004d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d5e:	607b      	str	r3, [r7, #4]
  return(result);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d109      	bne.n	8004d7a <osKernelInitialize+0x32>
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <osKernelInitialize+0x64>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d109      	bne.n	8004d82 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d72:	603b      	str	r3, [r7, #0]
  return(result);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004d7a:	f06f 0305 	mvn.w	r3, #5
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	e00c      	b.n	8004d9c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004d82:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <osKernelInitialize+0x64>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d105      	bne.n	8004d96 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <osKernelInitialize+0x64>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e002      	b.n	8004d9c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004d96:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000274 	.word	0x20000274

08004db0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004db6:	f3ef 8305 	mrs	r3, IPSR
 8004dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <osKernelStart+0x32>
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <osKernelStart+0x64>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d109      	bne.n	8004dea <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dda:	603b      	str	r3, [r7, #0]
  return(result);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8004de2:	f06f 0305 	mvn.w	r3, #5
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	e00e      	b.n	8004e08 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <osKernelStart+0x64>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d107      	bne.n	8004e02 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <osKernelStart+0x64>)
 8004df4:	2202      	movs	r2, #2
 8004df6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004df8:	f001 f81e 	bl	8005e38 <vTaskStartScheduler>
      stat = osOK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e002      	b.n	8004e08 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004e02:	f04f 33ff 	mov.w	r3, #4294967295
 8004e06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e08:	68fb      	ldr	r3, [r7, #12]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000274 	.word	0x20000274

08004e18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b092      	sub	sp, #72	; 0x48
 8004e1c:	af04      	add	r7, sp, #16
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004e24:	2300      	movs	r3, #0
 8004e26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e28:	f3ef 8305 	mrs	r3, IPSR
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f040 8094 	bne.w	8004f5e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e36:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3a:	623b      	str	r3, [r7, #32]
  return(result);
 8004e3c:	6a3b      	ldr	r3, [r7, #32]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 808d 	bne.w	8004f5e <osThreadNew+0x146>
 8004e44:	4b48      	ldr	r3, [pc, #288]	; (8004f68 <osThreadNew+0x150>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d106      	bne.n	8004e5a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f040 8082 	bne.w	8004f5e <osThreadNew+0x146>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d07e      	beq.n	8004f5e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004e64:	2318      	movs	r3, #24
 8004e66:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004e68:	2300      	movs	r3, #0
 8004e6a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004e6c:	f107 031b 	add.w	r3, r7, #27
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004e72:	f04f 33ff 	mov.w	r3, #4294967295
 8004e76:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d045      	beq.n	8004f0a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <osThreadNew+0x74>
        name = attr->name;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <osThreadNew+0x9a>
 8004ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea2:	2b38      	cmp	r3, #56	; 0x38
 8004ea4:	d805      	bhi.n	8004eb2 <osThreadNew+0x9a>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <osThreadNew+0x9e>
        return (NULL);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	e054      	b.n	8004f60 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	695b      	ldr	r3, [r3, #20]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00e      	beq.n	8004eec <osThreadNew+0xd4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8004ed4:	d90a      	bls.n	8004eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d006      	beq.n	8004eec <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <osThreadNew+0xd4>
        mem = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eea:	e010      	b.n	8004f0e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10c      	bne.n	8004f0e <osThreadNew+0xf6>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <osThreadNew+0xf6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d104      	bne.n	8004f0e <osThreadNew+0xf6>
          mem = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	e001      	b.n	8004f0e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d110      	bne.n	8004f36 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f1c:	9202      	str	r2, [sp, #8]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f28:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fdec 	bl	8005b08 <xTaskCreateStatic>
 8004f30:	4603      	mov	r3, r0
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e013      	b.n	8004f5e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004f4e:	68f8      	ldr	r0, [r7, #12]
 8004f50:	f000 fe36 	bl	8005bc0 <xTaskCreate>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d001      	beq.n	8004f5e <osThreadNew+0x146>
          hTask = NULL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3738      	adds	r7, #56	; 0x38
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	20000274 	.word	0x20000274

08004f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	4a06      	ldr	r2, [pc, #24]	; (8004f9c <vApplicationGetIdleTaskMemory+0x30>)
 8004f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2280      	movs	r2, #128	; 0x80
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000278 	.word	0x20000278
 8004f9c:	200002d4 	.word	0x200002d4

08004fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a07      	ldr	r2, [pc, #28]	; (8004fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8004fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8004fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fbe:	601a      	str	r2, [r3, #0]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	200004d4 	.word	0x200004d4
 8004fd0:	20000530 	.word	0x20000530

08004fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 0208 	add.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8004fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f103 0208 	add.w	r2, r3, #8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f103 0208 	add.w	r2, r3, #8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	689a      	ldr	r2, [r3, #8]
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	601a      	str	r2, [r3, #0]
}
 800506a:	bf00      	nop
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d103      	bne.n	8005096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e00c      	b.n	80050b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	3308      	adds	r3, #8
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	e002      	b.n	80050a4 <vListInsert+0x2e>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68ba      	ldr	r2, [r7, #8]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d2f6      	bcs.n	800509e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	601a      	str	r2, [r3, #0]
}
 80050dc:	bf00      	nop
 80050de:	3714      	adds	r7, #20
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6892      	ldr	r2, [r2, #8]
 80050fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	6852      	ldr	r2, [r2, #4]
 8005108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d103      	bne.n	800511c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	1e5a      	subs	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d10a      	bne.n	8005166 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005162:	bf00      	nop
 8005164:	e7fe      	b.n	8005164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005166:	f001 ffd5 	bl	8007114 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	441a      	add	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005196:	3b01      	subs	r3, #1
 8005198:	68f9      	ldr	r1, [r7, #12]
 800519a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800519c:	fb01 f303 	mul.w	r3, r1, r3
 80051a0:	441a      	add	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	22ff      	movs	r2, #255	; 0xff
 80051aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	22ff      	movs	r2, #255	; 0xff
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d114      	bne.n	80051e6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01a      	beq.n	80051fa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	3310      	adds	r3, #16
 80051c8:	4618      	mov	r0, r3
 80051ca:	f001 f8c3 	bl	8006354 <xTaskRemoveFromEventList>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d012      	beq.n	80051fa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <xQueueGenericReset+0xcc>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	e009      	b.n	80051fa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	3310      	adds	r3, #16
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff fef2 	bl	8004fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7ff feed 	bl	8004fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051fa:	f001 ffbb 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051fe:	2301      	movs	r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	; 0x38
 8005210:	af02      	add	r7, sp, #8
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <xQueueGenericCreateStatic+0x52>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <xQueueGenericCreateStatic+0x56>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueGenericCreateStatic+0x58>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <xQueueGenericCreateStatic+0x7e>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <xQueueGenericCreateStatic+0x82>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <xQueueGenericCreateStatic+0x84>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61fb      	str	r3, [r7, #28]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052aa:	2350      	movs	r3, #80	; 0x50
 80052ac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b50      	cmp	r3, #80	; 0x50
 80052b2:	d00a      	beq.n	80052ca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	61bb      	str	r3, [r7, #24]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80052ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00d      	beq.n	80052f0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052dc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80052e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e2:	9300      	str	r3, [sp, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f805 	bl	80052fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3730      	adds	r7, #48	; 0x30
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	60f8      	str	r0, [r7, #12]
 8005302:	60b9      	str	r1, [r7, #8]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	601a      	str	r2, [r3, #0]
 8005314:	e002      	b.n	800531c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005328:	2101      	movs	r1, #1
 800532a:	69b8      	ldr	r0, [r7, #24]
 800532c:	f7ff ff06 	bl	800513c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005338:	bf00      	nop
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08e      	sub	sp, #56	; 0x38
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericSend+0x32>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <xQueueGenericSend+0x40>
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <xQueueGenericSend+0x44>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <xQueueGenericSend+0x46>
 8005384:	2300      	movs	r3, #0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10a      	bne.n	80053a0 <xQueueGenericSend+0x60>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x6e>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d101      	bne.n	80053b2 <xQueueGenericSend+0x72>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <xQueueGenericSend+0x74>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10a      	bne.n	80053ce <xQueueGenericSend+0x8e>
	__asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	623b      	str	r3, [r7, #32]
}
 80053ca:	bf00      	nop
 80053cc:	e7fe      	b.n	80053cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053ce:	f001 f985 	bl	80066dc <xTaskGetSchedulerState>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d102      	bne.n	80053de <xQueueGenericSend+0x9e>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0xa2>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0xa4>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10a      	bne.n	80053fe <xQueueGenericSend+0xbe>
	__asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	61fb      	str	r3, [r7, #28]
}
 80053fa:	bf00      	nop
 80053fc:	e7fe      	b.n	80053fc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053fe:	f001 fe89 	bl	8007114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <xQueueGenericSend+0xd4>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b02      	cmp	r3, #2
 8005412:	d129      	bne.n	8005468 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541a:	f000 fa07 	bl	800582c <prvCopyDataToQueue>
 800541e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	2b00      	cmp	r3, #0
 8005426:	d010      	beq.n	800544a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	4618      	mov	r0, r3
 800542e:	f000 ff91 	bl	8006354 <xTaskRemoveFromEventList>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005438:	4b3f      	ldr	r3, [pc, #252]	; (8005538 <xQueueGenericSend+0x1f8>)
 800543a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	f3bf 8f6f 	isb	sy
 8005448:	e00a      	b.n	8005460 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d007      	beq.n	8005460 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005450:	4b39      	ldr	r3, [pc, #228]	; (8005538 <xQueueGenericSend+0x1f8>)
 8005452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005460:	f001 fe88 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8005464:	2301      	movs	r3, #1
 8005466:	e063      	b.n	8005530 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800546e:	f001 fe81 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005472:	2300      	movs	r3, #0
 8005474:	e05c      	b.n	8005530 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800547c:	f107 0314 	add.w	r3, r7, #20
 8005480:	4618      	mov	r0, r3
 8005482:	f000 ffcb 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800548a:	f001 fe73 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800548e:	f000 fd39 	bl	8005f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005492:	f001 fe3f 	bl	8007114 <vPortEnterCritical>
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800549c:	b25b      	sxtb	r3, r3
 800549e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a2:	d103      	bne.n	80054ac <xQueueGenericSend+0x16c>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b2:	b25b      	sxtb	r3, r3
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d103      	bne.n	80054c2 <xQueueGenericSend+0x182>
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054c2:	f001 fe57 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054c6:	1d3a      	adds	r2, r7, #4
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	4611      	mov	r1, r2
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 ffba 	bl	8006448 <xTaskCheckForTimeOut>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d124      	bne.n	8005524 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054dc:	f000 fa9e 	bl	8005a1c <prvIsQueueFull>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d018      	beq.n	8005518 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e8:	3310      	adds	r3, #16
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fee0 	bl	80062b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80054f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054f6:	f000 fa29 	bl	800594c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80054fa:	f000 fd11 	bl	8005f20 <xTaskResumeAll>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f af7c 	bne.w	80053fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <xQueueGenericSend+0x1f8>)
 8005508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	e772      	b.n	80053fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800551a:	f000 fa17 	bl	800594c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800551e:	f000 fcff 	bl	8005f20 <xTaskResumeAll>
 8005522:	e76c      	b.n	80053fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005524:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005526:	f000 fa11 	bl	800594c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800552a:	f000 fcf9 	bl	8005f20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800552e:	2300      	movs	r3, #0
		}
	}
}
 8005530:	4618      	mov	r0, r3
 8005532:	3738      	adds	r7, #56	; 0x38
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	e000ed04 	.word	0xe000ed04

0800553c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08e      	sub	sp, #56	; 0x38
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
 8005548:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d103      	bne.n	8005578 <xQueueGenericSendFromISR+0x3c>
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <xQueueGenericSendFromISR+0x40>
 8005578:	2301      	movs	r3, #1
 800557a:	e000      	b.n	800557e <xQueueGenericSendFromISR+0x42>
 800557c:	2300      	movs	r3, #0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10a      	bne.n	8005598 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	623b      	str	r3, [r7, #32]
}
 8005594:	bf00      	nop
 8005596:	e7fe      	b.n	8005596 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d103      	bne.n	80055a6 <xQueueGenericSendFromISR+0x6a>
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d101      	bne.n	80055aa <xQueueGenericSendFromISR+0x6e>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <xQueueGenericSendFromISR+0x70>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d10a      	bne.n	80055c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80055b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b4:	f383 8811 	msr	BASEPRI, r3
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	61fb      	str	r3, [r7, #28]
}
 80055c2:	bf00      	nop
 80055c4:	e7fe      	b.n	80055c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c6:	f001 fe87 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80055ca:	f3ef 8211 	mrs	r2, BASEPRI
 80055ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	61ba      	str	r2, [r7, #24]
 80055e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80055e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d302      	bcc.n	80055f8 <xQueueGenericSendFromISR+0xbc>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d12c      	bne.n	8005652 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005602:	683a      	ldr	r2, [r7, #0]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005608:	f000 f910 	bl	800582c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800560c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d112      	bne.n	800563c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d016      	beq.n	800564c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	3324      	adds	r3, #36	; 0x24
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fe96 	bl	8006354 <xTaskRemoveFromEventList>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	e007      	b.n	800564c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800563c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005640:	3301      	adds	r3, #1
 8005642:	b2db      	uxtb	r3, r3
 8005644:	b25a      	sxtb	r2, r3
 8005646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800564c:	2301      	movs	r3, #1
 800564e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005650:	e001      	b.n	8005656 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005652:	2300      	movs	r3, #0
 8005654:	637b      	str	r3, [r7, #52]	; 0x34
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005660:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005664:	4618      	mov	r0, r3
 8005666:	3738      	adds	r7, #56	; 0x38
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08c      	sub	sp, #48	; 0x30
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10a      	bne.n	800569c <xQueueReceive+0x30>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	623b      	str	r3, [r7, #32]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <xQueueReceive+0x3e>
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueReceive+0x42>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueReceive+0x44>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueReceive+0x5e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61fb      	str	r3, [r7, #28]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056ca:	f001 f807 	bl	80066dc <xTaskGetSchedulerState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <xQueueReceive+0x6e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <xQueueReceive+0x72>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <xQueueReceive+0x74>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10a      	bne.n	80056fa <xQueueReceive+0x8e>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	61bb      	str	r3, [r7, #24]
}
 80056f6:	bf00      	nop
 80056f8:	e7fe      	b.n	80056f8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056fa:	f001 fd0b 	bl	8007114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800570e:	f000 f8f7 	bl	8005900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00f      	beq.n	8005742 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	3310      	adds	r3, #16
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fe14 	bl	8006354 <xTaskRemoveFromEventList>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d007      	beq.n	8005742 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005732:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <xQueueReceive+0x1bc>)
 8005734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005742:	f001 fd17 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8005746:	2301      	movs	r3, #1
 8005748:	e069      	b.n	800581e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005750:	f001 fd10 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005754:	2300      	movs	r3, #0
 8005756:	e062      	b.n	800581e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d106      	bne.n	800576c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800575e:	f107 0310 	add.w	r3, r7, #16
 8005762:	4618      	mov	r0, r3
 8005764:	f000 fe5a 	bl	800641c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800576c:	f001 fd02 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005770:	f000 fbc8 	bl	8005f04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005774:	f001 fcce 	bl	8007114 <vPortEnterCritical>
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800577e:	b25b      	sxtb	r3, r3
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d103      	bne.n	800578e <xQueueReceive+0x122>
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005794:	b25b      	sxtb	r3, r3
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d103      	bne.n	80057a4 <xQueueReceive+0x138>
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057a4:	f001 fce6 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057a8:	1d3a      	adds	r2, r7, #4
 80057aa:	f107 0310 	add.w	r3, r7, #16
 80057ae:	4611      	mov	r1, r2
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fe49 	bl	8006448 <xTaskCheckForTimeOut>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d123      	bne.n	8005804 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057be:	f000 f917 	bl	80059f0 <prvIsQueueEmpty>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d017      	beq.n	80057f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	3324      	adds	r3, #36	; 0x24
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fd6f 	bl	80062b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d8:	f000 f8b8 	bl	800594c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057dc:	f000 fba0 	bl	8005f20 <xTaskResumeAll>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d189      	bne.n	80056fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057e6:	4b10      	ldr	r3, [pc, #64]	; (8005828 <xQueueReceive+0x1bc>)
 80057e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057ec:	601a      	str	r2, [r3, #0]
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	f3bf 8f6f 	isb	sy
 80057f6:	e780      	b.n	80056fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fa:	f000 f8a7 	bl	800594c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057fe:	f000 fb8f 	bl	8005f20 <xTaskResumeAll>
 8005802:	e77a      	b.n	80056fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005806:	f000 f8a1 	bl	800594c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800580a:	f000 fb89 	bl	8005f20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005810:	f000 f8ee 	bl	80059f0 <prvIsQueueEmpty>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	f43f af6f 	beq.w	80056fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800581c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800581e:	4618      	mov	r0, r3
 8005820:	3730      	adds	r7, #48	; 0x30
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10d      	bne.n	8005866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d14d      	bne.n	80058ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4618      	mov	r0, r3
 8005858:	f000 ff5e 	bl	8006718 <xTaskPriorityDisinherit>
 800585c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]
 8005864:	e043      	b.n	80058ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d119      	bne.n	80058a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6898      	ldr	r0, [r3, #8]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	461a      	mov	r2, r3
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	f001 ff74 	bl	8007764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005884:	441a      	add	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	429a      	cmp	r2, r3
 8005894:	d32b      	bcc.n	80058ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	e026      	b.n	80058ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	68d8      	ldr	r0, [r3, #12]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a8:	461a      	mov	r2, r3
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	f001 ff5a 	bl	8007764 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	425b      	negs	r3, r3
 80058ba:	441a      	add	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d207      	bcs.n	80058dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685a      	ldr	r2, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	425b      	negs	r3, r3
 80058d6:	441a      	add	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d105      	bne.n	80058ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058f6:	697b      	ldr	r3, [r7, #20]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d018      	beq.n	8005944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591a:	441a      	add	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d303      	bcc.n	8005934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	461a      	mov	r2, r3
 800593e:	6838      	ldr	r0, [r7, #0]
 8005940:	f001 ff10 	bl	8007764 <memcpy>
	}
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005954:	f001 fbde 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005960:	e011      	b.n	8005986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3324      	adds	r3, #36	; 0x24
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fcf0 	bl	8006354 <xTaskRemoveFromEventList>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800597a:	f000 fdc7 	bl	800650c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800597e:	7bfb      	ldrb	r3, [r7, #15]
 8005980:	3b01      	subs	r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dce9      	bgt.n	8005962 <prvUnlockQueue+0x16>
 800598e:	e000      	b.n	8005992 <prvUnlockQueue+0x46>
					break;
 8005990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800599a:	f001 fbeb 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800599e:	f001 fbb9 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059aa:	e011      	b.n	80059d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d012      	beq.n	80059da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3310      	adds	r3, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fccb 	bl	8006354 <xTaskRemoveFromEventList>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059c4:	f000 fda2 	bl	800650c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	dce9      	bgt.n	80059ac <prvUnlockQueue+0x60>
 80059d8:	e000      	b.n	80059dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	22ff      	movs	r2, #255	; 0xff
 80059e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059e4:	f001 fbc6 	bl	8007174 <vPortExitCritical>
}
 80059e8:	bf00      	nop
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f8:	f001 fb8c 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d102      	bne.n	8005a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	e001      	b.n	8005a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a0e:	f001 fbb1 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005a12:	68fb      	ldr	r3, [r7, #12]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a24:	f001 fb76 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d102      	bne.n	8005a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e001      	b.n	8005a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a3e:	f001 fb99 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005a42:	68fb      	ldr	r3, [r7, #12]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e014      	b.n	8005a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a5c:	4a0f      	ldr	r2, [pc, #60]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10b      	bne.n	8005a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a68:	490c      	ldr	r1, [pc, #48]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	683a      	ldr	r2, [r7, #0]
 8005a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <vQueueAddToRegistry+0x50>)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a7e:	e006      	b.n	8005a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b07      	cmp	r3, #7
 8005a8a:	d9e7      	bls.n	8005a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000930 	.word	0x20000930

08005aa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ab0:	f001 fb30 	bl	8007114 <vPortEnterCritical>
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d103      	bne.n	8005aca <vQueueWaitForMessageRestricted+0x2a>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad0:	b25b      	sxtb	r3, r3
 8005ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad6:	d103      	bne.n	8005ae0 <vQueueWaitForMessageRestricted+0x40>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ae0:	f001 fb48 	bl	8007174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3324      	adds	r3, #36	; 0x24
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f000 fc01 	bl	80062fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005afa:	6978      	ldr	r0, [r7, #20]
 8005afc:	f7ff ff26 	bl	800594c <prvUnlockQueue>
	}
 8005b00:	bf00      	nop
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08e      	sub	sp, #56	; 0x38
 8005b0c:	af04      	add	r7, sp, #16
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10a      	bne.n	8005b32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	623b      	str	r3, [r7, #32]
}
 8005b2e:	bf00      	nop
 8005b30:	e7fe      	b.n	8005b30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xTaskCreateStatic+0x46>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	61fb      	str	r3, [r7, #28]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b4e:	235c      	movs	r3, #92	; 0x5c
 8005b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b5c      	cmp	r3, #92	; 0x5c
 8005b56:	d00a      	beq.n	8005b6e <xTaskCreateStatic+0x66>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61bb      	str	r3, [r7, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01e      	beq.n	8005bb2 <xTaskCreateStatic+0xaa>
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d01b      	beq.n	8005bb2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	2202      	movs	r2, #2
 8005b88:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	9303      	str	r3, [sp, #12]
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	9302      	str	r3, [sp, #8]
 8005b94:	f107 0314 	add.w	r3, r7, #20
 8005b98:	9301      	str	r3, [sp, #4]
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 f850 	bl	8005c4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005baa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bac:	f000 f8d4 	bl	8005d58 <prvAddNewTaskToReadyList>
 8005bb0:	e001      	b.n	8005bb6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bb6:	697b      	ldr	r3, [r7, #20]
	}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3728      	adds	r7, #40	; 0x28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af04      	add	r7, sp, #16
 8005bc6:	60f8      	str	r0, [r7, #12]
 8005bc8:	60b9      	str	r1, [r7, #8]
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bd0:	88fb      	ldrh	r3, [r7, #6]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f001 fbbf 	bl	8007358 <pvPortMalloc>
 8005bda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005be2:	205c      	movs	r0, #92	; 0x5c
 8005be4:	f001 fbb8 	bl	8007358 <pvPortMalloc>
 8005be8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d003      	beq.n	8005bf8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
 8005bf6:	e005      	b.n	8005c04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bf8:	6978      	ldr	r0, [r7, #20]
 8005bfa:	f001 fc71 	bl	80074e0 <vPortFree>
 8005bfe:	e001      	b.n	8005c04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c00:	2300      	movs	r3, #0
 8005c02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d017      	beq.n	8005c3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c12:	88fa      	ldrh	r2, [r7, #6]
 8005c14:	2300      	movs	r3, #0
 8005c16:	9303      	str	r3, [sp, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f80e 	bl	8005c4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c2e:	69f8      	ldr	r0, [r7, #28]
 8005c30:	f000 f892 	bl	8005d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c34:	2301      	movs	r3, #1
 8005c36:	61bb      	str	r3, [r7, #24]
 8005c38:	e002      	b.n	8005c40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c40:	69bb      	ldr	r3, [r7, #24]
	}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3720      	adds	r7, #32
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b088      	sub	sp, #32
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	60f8      	str	r0, [r7, #12]
 8005c52:	60b9      	str	r1, [r7, #8]
 8005c54:	607a      	str	r2, [r7, #4]
 8005c56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	461a      	mov	r2, r3
 8005c62:	21a5      	movs	r1, #165	; 0xa5
 8005c64:	f001 fd52 	bl	800770c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c72:	3b01      	subs	r3, #1
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f023 0307 	bic.w	r3, r3, #7
 8005c80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	617b      	str	r3, [r7, #20]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	61fb      	str	r3, [r7, #28]
 8005ca6:	e012      	b.n	8005cce <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	7819      	ldrb	r1, [r3, #0]
 8005cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3334      	adds	r3, #52	; 0x34
 8005cb8:	460a      	mov	r2, r1
 8005cba:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b0f      	cmp	r3, #15
 8005cd2:	d9e9      	bls.n	8005ca8 <prvInitialiseNewTask+0x5e>
 8005cd4:	e000      	b.n	8005cd8 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005cd6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce2:	2b37      	cmp	r3, #55	; 0x37
 8005ce4:	d901      	bls.n	8005cea <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ce6:	2337      	movs	r3, #55	; 0x37
 8005ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3304      	adds	r3, #4
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f987 	bl	8005014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	3318      	adds	r3, #24
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff f982 	bl	8005014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	2200      	movs	r2, #0
 8005d2a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	68f9      	ldr	r1, [r7, #12]
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f001 f8c1 	bl	8006ec0 <pxPortInitialiseStack>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d50:	bf00      	nop
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d60:	f001 f9d8 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d64:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a2c      	ldr	r2, [pc, #176]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d6e:	4b2c      	ldr	r3, [pc, #176]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d76:	4a2a      	ldr	r2, [pc, #168]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d7c:	4b27      	ldr	r3, [pc, #156]	; (8005e1c <prvAddNewTaskToReadyList+0xc4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d110      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d84:	f000 fbe6 	bl	8006554 <prvInitialiseTaskLists>
 8005d88:	e00d      	b.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d8a:	4b26      	ldr	r3, [pc, #152]	; (8005e24 <prvAddNewTaskToReadyList+0xcc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d92:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d802      	bhi.n	8005da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005da0:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005dae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <prvAddNewTaskToReadyList+0xd0>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <prvAddNewTaskToReadyList+0xd4>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d903      	bls.n	8005dcc <prvAddNewTaskToReadyList+0x74>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a18      	ldr	r2, [pc, #96]	; (8005e2c <prvAddNewTaskToReadyList+0xd4>)
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4a15      	ldr	r2, [pc, #84]	; (8005e30 <prvAddNewTaskToReadyList+0xd8>)
 8005dda:	441a      	add	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7ff f923 	bl	800502e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005de8:	f001 f9c4 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dec:	4b0d      	ldr	r3, [pc, #52]	; (8005e24 <prvAddNewTaskToReadyList+0xcc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00e      	beq.n	8005e12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005df4:	4b0a      	ldr	r3, [pc, #40]	; (8005e20 <prvAddNewTaskToReadyList+0xc8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d207      	bcs.n	8005e12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e02:	4b0c      	ldr	r3, [pc, #48]	; (8005e34 <prvAddNewTaskToReadyList+0xdc>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e12:	bf00      	nop
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000e44 	.word	0x20000e44
 8005e20:	20000970 	.word	0x20000970
 8005e24:	20000e50 	.word	0x20000e50
 8005e28:	20000e60 	.word	0x20000e60
 8005e2c:	20000e4c 	.word	0x20000e4c
 8005e30:	20000974 	.word	0x20000974
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e46:	463a      	mov	r2, r7
 8005e48:	1d39      	adds	r1, r7, #4
 8005e4a:	f107 0308 	add.w	r3, r7, #8
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff f88c 	bl	8004f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e54:	6839      	ldr	r1, [r7, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	9202      	str	r2, [sp, #8]
 8005e5c:	9301      	str	r3, [sp, #4]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9300      	str	r3, [sp, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	460a      	mov	r2, r1
 8005e66:	4921      	ldr	r1, [pc, #132]	; (8005eec <vTaskStartScheduler+0xb4>)
 8005e68:	4821      	ldr	r0, [pc, #132]	; (8005ef0 <vTaskStartScheduler+0xb8>)
 8005e6a:	f7ff fe4d 	bl	8005b08 <xTaskCreateStatic>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4a20      	ldr	r2, [pc, #128]	; (8005ef4 <vTaskStartScheduler+0xbc>)
 8005e72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e74:	4b1f      	ldr	r3, [pc, #124]	; (8005ef4 <vTaskStartScheduler+0xbc>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
 8005e80:	e001      	b.n	8005e86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d102      	bne.n	8005e92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e8c:	f000 fd06 	bl	800689c <xTimerCreateTimerTask>
 8005e90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d116      	bne.n	8005ec6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	613b      	str	r3, [r7, #16]
}
 8005eaa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005eac:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <vTaskStartScheduler+0xc0>)
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005eb4:	4b11      	ldr	r3, [pc, #68]	; (8005efc <vTaskStartScheduler+0xc4>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005eba:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <vTaskStartScheduler+0xc8>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ec0:	f001 f886 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ec4:	e00e      	b.n	8005ee4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ecc:	d10a      	bne.n	8005ee4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60fb      	str	r3, [r7, #12]
}
 8005ee0:	bf00      	nop
 8005ee2:	e7fe      	b.n	8005ee2 <vTaskStartScheduler+0xaa>
}
 8005ee4:	bf00      	nop
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	080077b4 	.word	0x080077b4
 8005ef0:	08006525 	.word	0x08006525
 8005ef4:	20000e68 	.word	0x20000e68
 8005ef8:	20000e64 	.word	0x20000e64
 8005efc:	20000e50 	.word	0x20000e50
 8005f00:	20000e48 	.word	0x20000e48

08005f04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005f08:	4b04      	ldr	r3, [pc, #16]	; (8005f1c <vTaskSuspendAll+0x18>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a03      	ldr	r2, [pc, #12]	; (8005f1c <vTaskSuspendAll+0x18>)
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	20000e6c 	.word	0x20000e6c

08005f20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f2e:	4b42      	ldr	r3, [pc, #264]	; (8006038 <xTaskResumeAll+0x118>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <xTaskResumeAll+0x2c>
	__asm volatile
 8005f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3a:	f383 8811 	msr	BASEPRI, r3
 8005f3e:	f3bf 8f6f 	isb	sy
 8005f42:	f3bf 8f4f 	dsb	sy
 8005f46:	603b      	str	r3, [r7, #0]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f4c:	f001 f8e2 	bl	8007114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f50:	4b39      	ldr	r3, [pc, #228]	; (8006038 <xTaskResumeAll+0x118>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	4a38      	ldr	r2, [pc, #224]	; (8006038 <xTaskResumeAll+0x118>)
 8005f58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5a:	4b37      	ldr	r3, [pc, #220]	; (8006038 <xTaskResumeAll+0x118>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d162      	bne.n	8006028 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f62:	4b36      	ldr	r3, [pc, #216]	; (800603c <xTaskResumeAll+0x11c>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d05e      	beq.n	8006028 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f6a:	e02f      	b.n	8005fcc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005f6c:	4b34      	ldr	r3, [pc, #208]	; (8006040 <xTaskResumeAll+0x120>)
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	3318      	adds	r3, #24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff f8b5 	bl	80050e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	3304      	adds	r3, #4
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff f8b0 	bl	80050e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <xTaskResumeAll+0x124>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d903      	bls.n	8005f9c <xTaskResumeAll+0x7c>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	4a2a      	ldr	r2, [pc, #168]	; (8006044 <xTaskResumeAll+0x124>)
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4a27      	ldr	r2, [pc, #156]	; (8006048 <xTaskResumeAll+0x128>)
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	3304      	adds	r3, #4
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	f7ff f83b 	bl	800502e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4b23      	ldr	r3, [pc, #140]	; (800604c <xTaskResumeAll+0x12c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fc6:	4b22      	ldr	r3, [pc, #136]	; (8006050 <xTaskResumeAll+0x130>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fcc:	4b1c      	ldr	r3, [pc, #112]	; (8006040 <xTaskResumeAll+0x120>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1cb      	bne.n	8005f6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fda:	f000 fb59 	bl	8006690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005fde:	4b1d      	ldr	r3, [pc, #116]	; (8006054 <xTaskResumeAll+0x134>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d010      	beq.n	800600c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fea:	f000 f847 	bl	800607c <xTaskIncrementTick>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d002      	beq.n	8005ffa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ff4:	4b16      	ldr	r3, [pc, #88]	; (8006050 <xTaskResumeAll+0x130>)
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1f1      	bne.n	8005fea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006006:	4b13      	ldr	r3, [pc, #76]	; (8006054 <xTaskResumeAll+0x134>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <xTaskResumeAll+0x130>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d009      	beq.n	8006028 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006014:	2301      	movs	r3, #1
 8006016:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <xTaskResumeAll+0x138>)
 800601a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800601e:	601a      	str	r2, [r3, #0]
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006028:	f001 f8a4 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 800602c:	68bb      	ldr	r3, [r7, #8]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20000e6c 	.word	0x20000e6c
 800603c:	20000e44 	.word	0x20000e44
 8006040:	20000e04 	.word	0x20000e04
 8006044:	20000e4c 	.word	0x20000e4c
 8006048:	20000974 	.word	0x20000974
 800604c:	20000970 	.word	0x20000970
 8006050:	20000e58 	.word	0x20000e58
 8006054:	20000e54 	.word	0x20000e54
 8006058:	e000ed04 	.word	0xe000ed04

0800605c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <xTaskGetTickCount+0x1c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006068:	687b      	ldr	r3, [r7, #4]
}
 800606a:	4618      	mov	r0, r3
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	20000e48 	.word	0x20000e48

0800607c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006082:	2300      	movs	r3, #0
 8006084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006086:	4b51      	ldr	r3, [pc, #324]	; (80061cc <xTaskIncrementTick+0x150>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 808e 	bne.w	80061ac <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006090:	4b4f      	ldr	r3, [pc, #316]	; (80061d0 <xTaskIncrementTick+0x154>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006098:	4a4d      	ldr	r2, [pc, #308]	; (80061d0 <xTaskIncrementTick+0x154>)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d120      	bne.n	80060e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80060a4:	4b4b      	ldr	r3, [pc, #300]	; (80061d4 <xTaskIncrementTick+0x158>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00a      	beq.n	80060c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	603b      	str	r3, [r7, #0]
}
 80060c0:	bf00      	nop
 80060c2:	e7fe      	b.n	80060c2 <xTaskIncrementTick+0x46>
 80060c4:	4b43      	ldr	r3, [pc, #268]	; (80061d4 <xTaskIncrementTick+0x158>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	4b43      	ldr	r3, [pc, #268]	; (80061d8 <xTaskIncrementTick+0x15c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a41      	ldr	r2, [pc, #260]	; (80061d4 <xTaskIncrementTick+0x158>)
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	4a41      	ldr	r2, [pc, #260]	; (80061d8 <xTaskIncrementTick+0x15c>)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4b40      	ldr	r3, [pc, #256]	; (80061dc <xTaskIncrementTick+0x160>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	3301      	adds	r3, #1
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <xTaskIncrementTick+0x160>)
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	f000 fad5 	bl	8006690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060e6:	4b3e      	ldr	r3, [pc, #248]	; (80061e0 <xTaskIncrementTick+0x164>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d34e      	bcc.n	800618e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060f0:	4b38      	ldr	r3, [pc, #224]	; (80061d4 <xTaskIncrementTick+0x158>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d101      	bne.n	80060fe <xTaskIncrementTick+0x82>
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <xTaskIncrementTick+0x84>
 80060fe:	2300      	movs	r3, #0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d004      	beq.n	800610e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006104:	4b36      	ldr	r3, [pc, #216]	; (80061e0 <xTaskIncrementTick+0x164>)
 8006106:	f04f 32ff 	mov.w	r2, #4294967295
 800610a:	601a      	str	r2, [r3, #0]
					break;
 800610c:	e03f      	b.n	800618e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800610e:	4b31      	ldr	r3, [pc, #196]	; (80061d4 <xTaskIncrementTick+0x158>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d203      	bcs.n	800612e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006126:	4a2e      	ldr	r2, [pc, #184]	; (80061e0 <xTaskIncrementTick+0x164>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6013      	str	r3, [r2, #0]
						break;
 800612c:	e02f      	b.n	800618e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	3304      	adds	r3, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f7fe ffd8 	bl	80050e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d004      	beq.n	800614a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	3318      	adds	r3, #24
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe ffcf 	bl	80050e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614e:	4b25      	ldr	r3, [pc, #148]	; (80061e4 <xTaskIncrementTick+0x168>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d903      	bls.n	800615e <xTaskIncrementTick+0xe2>
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615a:	4a22      	ldr	r2, [pc, #136]	; (80061e4 <xTaskIncrementTick+0x168>)
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006162:	4613      	mov	r3, r2
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4413      	add	r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	4a1f      	ldr	r2, [pc, #124]	; (80061e8 <xTaskIncrementTick+0x16c>)
 800616c:	441a      	add	r2, r3
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	3304      	adds	r3, #4
 8006172:	4619      	mov	r1, r3
 8006174:	4610      	mov	r0, r2
 8006176:	f7fe ff5a 	bl	800502e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617e:	4b1b      	ldr	r3, [pc, #108]	; (80061ec <xTaskIncrementTick+0x170>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	429a      	cmp	r2, r3
 8006186:	d3b3      	bcc.n	80060f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618c:	e7b0      	b.n	80060f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800618e:	4b17      	ldr	r3, [pc, #92]	; (80061ec <xTaskIncrementTick+0x170>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	4914      	ldr	r1, [pc, #80]	; (80061e8 <xTaskIncrementTick+0x16c>)
 8006196:	4613      	mov	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4413      	add	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	440b      	add	r3, r1
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d907      	bls.n	80061b6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80061a6:	2301      	movs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	e004      	b.n	80061b6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <xTaskIncrementTick+0x174>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <xTaskIncrementTick+0x174>)
 80061b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80061b6:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <xTaskIncrementTick+0x178>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80061be:	2301      	movs	r3, #1
 80061c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80061c2:	697b      	ldr	r3, [r7, #20]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	20000e6c 	.word	0x20000e6c
 80061d0:	20000e48 	.word	0x20000e48
 80061d4:	20000dfc 	.word	0x20000dfc
 80061d8:	20000e00 	.word	0x20000e00
 80061dc:	20000e5c 	.word	0x20000e5c
 80061e0:	20000e64 	.word	0x20000e64
 80061e4:	20000e4c 	.word	0x20000e4c
 80061e8:	20000974 	.word	0x20000974
 80061ec:	20000970 	.word	0x20000970
 80061f0:	20000e54 	.word	0x20000e54
 80061f4:	20000e58 	.word	0x20000e58

080061f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061fe:	4b28      	ldr	r3, [pc, #160]	; (80062a0 <vTaskSwitchContext+0xa8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d003      	beq.n	800620e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006206:	4b27      	ldr	r3, [pc, #156]	; (80062a4 <vTaskSwitchContext+0xac>)
 8006208:	2201      	movs	r2, #1
 800620a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800620c:	e041      	b.n	8006292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800620e:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <vTaskSwitchContext+0xac>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <vTaskSwitchContext+0xb0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	60fb      	str	r3, [r7, #12]
 800621a:	e010      	b.n	800623e <vTaskSwitchContext+0x46>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <vTaskSwitchContext+0x40>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	607b      	str	r3, [r7, #4]
}
 8006234:	bf00      	nop
 8006236:	e7fe      	b.n	8006236 <vTaskSwitchContext+0x3e>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	3b01      	subs	r3, #1
 800623c:	60fb      	str	r3, [r7, #12]
 800623e:	491b      	ldr	r1, [pc, #108]	; (80062ac <vTaskSwitchContext+0xb4>)
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	440b      	add	r3, r1
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0e4      	beq.n	800621c <vTaskSwitchContext+0x24>
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4613      	mov	r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <vTaskSwitchContext+0xb4>)
 800625e:	4413      	add	r3, r2
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	3308      	adds	r3, #8
 8006274:	429a      	cmp	r2, r3
 8006276:	d104      	bne.n	8006282 <vTaskSwitchContext+0x8a>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <vTaskSwitchContext+0xb8>)
 800628a:	6013      	str	r3, [r2, #0]
 800628c:	4a06      	ldr	r2, [pc, #24]	; (80062a8 <vTaskSwitchContext+0xb0>)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6013      	str	r3, [r2, #0]
}
 8006292:	bf00      	nop
 8006294:	3714      	adds	r7, #20
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	20000e6c 	.word	0x20000e6c
 80062a4:	20000e58 	.word	0x20000e58
 80062a8:	20000e4c 	.word	0x20000e4c
 80062ac:	20000974 	.word	0x20000974
 80062b0:	20000970 	.word	0x20000970

080062b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	60fb      	str	r3, [r7, #12]
}
 80062d6:	bf00      	nop
 80062d8:	e7fe      	b.n	80062d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062da:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <vTaskPlaceOnEventList+0x44>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	3318      	adds	r3, #24
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fe fec7 	bl	8005076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062e8:	2101      	movs	r1, #1
 80062ea:	6838      	ldr	r0, [r7, #0]
 80062ec:	f000 fa82 	bl	80067f4 <prvAddCurrentTaskToDelayedList>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000970 	.word	0x20000970

080062fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10a      	bne.n	8006324 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	617b      	str	r3, [r7, #20]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <vTaskPlaceOnEventListRestricted+0x54>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3318      	adds	r3, #24
 800632a:	4619      	mov	r1, r3
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f7fe fe7e 	bl	800502e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d002      	beq.n	800633e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006338:	f04f 33ff 	mov.w	r3, #4294967295
 800633c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800633e:	6879      	ldr	r1, [r7, #4]
 8006340:	68b8      	ldr	r0, [r7, #8]
 8006342:	f000 fa57 	bl	80067f4 <prvAddCurrentTaskToDelayedList>
	}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000970 	.word	0x20000970

08006354 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	3318      	adds	r3, #24
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe feaf 	bl	80050e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800638a:	4b1e      	ldr	r3, [pc, #120]	; (8006404 <xTaskRemoveFromEventList+0xb0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d11d      	bne.n	80063ce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	3304      	adds	r3, #4
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe fea6 	bl	80050e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d903      	bls.n	80063b0 <xTaskRemoveFromEventList+0x5c>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ac:	4a16      	ldr	r2, [pc, #88]	; (8006408 <xTaskRemoveFromEventList+0xb4>)
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4a13      	ldr	r2, [pc, #76]	; (800640c <xTaskRemoveFromEventList+0xb8>)
 80063be:	441a      	add	r2, r3
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fe31 	bl	800502e <vListInsertEnd>
 80063cc:	e005      	b.n	80063da <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4619      	mov	r1, r3
 80063d4:	480e      	ldr	r0, [pc, #56]	; (8006410 <xTaskRemoveFromEventList+0xbc>)
 80063d6:	f7fe fe2a 	bl	800502e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <xTaskRemoveFromEventList+0xc0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d905      	bls.n	80063f4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <xTaskRemoveFromEventList+0xc4>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	e001      	b.n	80063f8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80063f8:	697b      	ldr	r3, [r7, #20]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3718      	adds	r7, #24
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	20000e6c 	.word	0x20000e6c
 8006408:	20000e4c 	.word	0x20000e4c
 800640c:	20000974 	.word	0x20000974
 8006410:	20000e04 	.word	0x20000e04
 8006414:	20000970 	.word	0x20000970
 8006418:	20000e58 	.word	0x20000e58

0800641c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006424:	4b06      	ldr	r3, [pc, #24]	; (8006440 <vTaskInternalSetTimeOutState+0x24>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <vTaskInternalSetTimeOutState+0x28>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	605a      	str	r2, [r3, #4]
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000e5c 	.word	0x20000e5c
 8006444:	20000e48 	.word	0x20000e48

08006448 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b088      	sub	sp, #32
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	613b      	str	r3, [r7, #16]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10a      	bne.n	800648a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60fb      	str	r3, [r7, #12]
}
 8006486:	bf00      	nop
 8006488:	e7fe      	b.n	8006488 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800648a:	f000 fe43 	bl	8007114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <xTaskCheckForTimeOut+0xbc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	69ba      	ldr	r2, [r7, #24]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	d102      	bne.n	80064ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064a8:	2300      	movs	r3, #0
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e023      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	4b15      	ldr	r3, [pc, #84]	; (8006508 <xTaskCheckForTimeOut+0xc0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d007      	beq.n	80064ca <xTaskCheckForTimeOut+0x82>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	69ba      	ldr	r2, [r7, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	61fb      	str	r3, [r7, #28]
 80064c8:	e015      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d20b      	bcs.n	80064ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	1ad2      	subs	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f7ff ff9b 	bl	800641c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	e004      	b.n	80064f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064f2:	2301      	movs	r3, #1
 80064f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064f6:	f000 fe3d 	bl	8007174 <vPortExitCritical>

	return xReturn;
 80064fa:	69fb      	ldr	r3, [r7, #28]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000e48 	.word	0x20000e48
 8006508:	20000e5c 	.word	0x20000e5c

0800650c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800650c:	b480      	push	{r7}
 800650e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006510:	4b03      	ldr	r3, [pc, #12]	; (8006520 <vTaskMissedYield+0x14>)
 8006512:	2201      	movs	r2, #1
 8006514:	601a      	str	r2, [r3, #0]
}
 8006516:	bf00      	nop
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	20000e58 	.word	0x20000e58

08006524 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800652c:	f000 f852 	bl	80065d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <prvIdleTask+0x28>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d9f9      	bls.n	800652c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <prvIdleTask+0x2c>)
 800653a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006548:	e7f0      	b.n	800652c <prvIdleTask+0x8>
 800654a:	bf00      	nop
 800654c:	20000974 	.word	0x20000974
 8006550:	e000ed04 	.word	0xe000ed04

08006554 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800655a:	2300      	movs	r3, #0
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	e00c      	b.n	800657a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <prvInitialiseTaskLists+0x60>)
 800656c:	4413      	add	r3, r2
 800656e:	4618      	mov	r0, r3
 8006570:	f7fe fd30 	bl	8004fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	3301      	adds	r3, #1
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b37      	cmp	r3, #55	; 0x37
 800657e:	d9ef      	bls.n	8006560 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006580:	480d      	ldr	r0, [pc, #52]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 8006582:	f7fe fd27 	bl	8004fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006586:	480d      	ldr	r0, [pc, #52]	; (80065bc <prvInitialiseTaskLists+0x68>)
 8006588:	f7fe fd24 	bl	8004fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800658c:	480c      	ldr	r0, [pc, #48]	; (80065c0 <prvInitialiseTaskLists+0x6c>)
 800658e:	f7fe fd21 	bl	8004fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006592:	480c      	ldr	r0, [pc, #48]	; (80065c4 <prvInitialiseTaskLists+0x70>)
 8006594:	f7fe fd1e 	bl	8004fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006598:	480b      	ldr	r0, [pc, #44]	; (80065c8 <prvInitialiseTaskLists+0x74>)
 800659a:	f7fe fd1b 	bl	8004fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800659e:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvInitialiseTaskLists+0x78>)
 80065a0:	4a05      	ldr	r2, [pc, #20]	; (80065b8 <prvInitialiseTaskLists+0x64>)
 80065a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvInitialiseTaskLists+0x7c>)
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <prvInitialiseTaskLists+0x68>)
 80065a8:	601a      	str	r2, [r3, #0]
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000974 	.word	0x20000974
 80065b8:	20000dd4 	.word	0x20000dd4
 80065bc:	20000de8 	.word	0x20000de8
 80065c0:	20000e04 	.word	0x20000e04
 80065c4:	20000e18 	.word	0x20000e18
 80065c8:	20000e30 	.word	0x20000e30
 80065cc:	20000dfc 	.word	0x20000dfc
 80065d0:	20000e00 	.word	0x20000e00

080065d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065da:	e019      	b.n	8006610 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065dc:	f000 fd9a 	bl	8007114 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80065e0:	4b10      	ldr	r3, [pc, #64]	; (8006624 <prvCheckTasksWaitingTermination+0x50>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	3304      	adds	r3, #4
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7fe fd7b 	bl	80050e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065f2:	4b0d      	ldr	r3, [pc, #52]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3b01      	subs	r3, #1
 80065f8:	4a0b      	ldr	r2, [pc, #44]	; (8006628 <prvCheckTasksWaitingTermination+0x54>)
 80065fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3b01      	subs	r3, #1
 8006602:	4a0a      	ldr	r2, [pc, #40]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006604:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006606:	f000 fdb5 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f810 	bl	8006630 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006610:	4b06      	ldr	r3, [pc, #24]	; (800662c <prvCheckTasksWaitingTermination+0x58>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e1      	bne.n	80065dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000e18 	.word	0x20000e18
 8006628:	20000e44 	.word	0x20000e44
 800662c:	20000e2c 	.word	0x20000e2c

08006630 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800663e:	2b00      	cmp	r3, #0
 8006640:	d108      	bne.n	8006654 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006646:	4618      	mov	r0, r3
 8006648:	f000 ff4a 	bl	80074e0 <vPortFree>
				vPortFree( pxTCB );
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 ff47 	bl	80074e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006652:	e018      	b.n	8006686 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800665a:	2b01      	cmp	r3, #1
 800665c:	d103      	bne.n	8006666 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 ff3e 	bl	80074e0 <vPortFree>
	}
 8006664:	e00f      	b.n	8006686 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800666c:	2b02      	cmp	r3, #2
 800666e:	d00a      	beq.n	8006686 <prvDeleteTCB+0x56>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <prvDeleteTCB+0x54>
	}
 8006686:	bf00      	nop
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	4b0f      	ldr	r3, [pc, #60]	; (80066d4 <prvResetNextTaskUnblockTime+0x44>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <prvResetNextTaskUnblockTime+0x14>
 80066a0:	2301      	movs	r3, #1
 80066a2:	e000      	b.n	80066a6 <prvResetNextTaskUnblockTime+0x16>
 80066a4:	2300      	movs	r3, #0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d004      	beq.n	80066b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066aa:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <prvResetNextTaskUnblockTime+0x48>)
 80066ac:	f04f 32ff 	mov.w	r2, #4294967295
 80066b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066b2:	e008      	b.n	80066c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvResetNextTaskUnblockTime+0x44>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	4a05      	ldr	r2, [pc, #20]	; (80066d8 <prvResetNextTaskUnblockTime+0x48>)
 80066c4:	6013      	str	r3, [r2, #0]
}
 80066c6:	bf00      	nop
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000dfc 	.word	0x20000dfc
 80066d8:	20000e64 	.word	0x20000e64

080066dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066e2:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <xTaskGetSchedulerState+0x34>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d102      	bne.n	80066f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066ea:	2301      	movs	r3, #1
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	e008      	b.n	8006702 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <xTaskGetSchedulerState+0x38>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066f8:	2302      	movs	r3, #2
 80066fa:	607b      	str	r3, [r7, #4]
 80066fc:	e001      	b.n	8006702 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066fe:	2300      	movs	r3, #0
 8006700:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006702:	687b      	ldr	r3, [r7, #4]
	}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000e50 	.word	0x20000e50
 8006714:	20000e6c 	.word	0x20000e6c

08006718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006724:	2300      	movs	r3, #0
 8006726:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d056      	beq.n	80067dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800672e:	4b2e      	ldr	r3, [pc, #184]	; (80067e8 <xTaskPriorityDisinherit+0xd0>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	429a      	cmp	r2, r3
 8006736:	d00a      	beq.n	800674e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10a      	bne.n	800676c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800675a:	f383 8811 	msr	BASEPRI, r3
 800675e:	f3bf 8f6f 	isb	sy
 8006762:	f3bf 8f4f 	dsb	sy
 8006766:	60bb      	str	r3, [r7, #8]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006770:	1e5a      	subs	r2, r3, #1
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800677e:	429a      	cmp	r2, r3
 8006780:	d02c      	beq.n	80067dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006786:	2b00      	cmp	r3, #0
 8006788:	d128      	bne.n	80067dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	3304      	adds	r3, #4
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fcaa 	bl	80050e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <xTaskPriorityDisinherit+0xd4>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d903      	bls.n	80067bc <xTaskPriorityDisinherit+0xa4>
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	4a0c      	ldr	r2, [pc, #48]	; (80067ec <xTaskPriorityDisinherit+0xd4>)
 80067ba:	6013      	str	r3, [r2, #0]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c0:	4613      	mov	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4a09      	ldr	r2, [pc, #36]	; (80067f0 <xTaskPriorityDisinherit+0xd8>)
 80067ca:	441a      	add	r2, r3
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	3304      	adds	r3, #4
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fc2b 	bl	800502e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067dc:	697b      	ldr	r3, [r7, #20]
	}
 80067de:	4618      	mov	r0, r3
 80067e0:	3718      	adds	r7, #24
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20000970 	.word	0x20000970
 80067ec:	20000e4c 	.word	0x20000e4c
 80067f0:	20000974 	.word	0x20000974

080067f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067fe:	4b21      	ldr	r3, [pc, #132]	; (8006884 <prvAddCurrentTaskToDelayedList+0x90>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006804:	4b20      	ldr	r3, [pc, #128]	; (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fc6c 	bl	80050e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006816:	d10a      	bne.n	800682e <prvAddCurrentTaskToDelayedList+0x3a>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d007      	beq.n	800682e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800681e:	4b1a      	ldr	r3, [pc, #104]	; (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3304      	adds	r3, #4
 8006824:	4619      	mov	r1, r3
 8006826:	4819      	ldr	r0, [pc, #100]	; (800688c <prvAddCurrentTaskToDelayedList+0x98>)
 8006828:	f7fe fc01 	bl	800502e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800682c:	e026      	b.n	800687c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4413      	add	r3, r2
 8006834:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006836:	4b14      	ldr	r3, [pc, #80]	; (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	429a      	cmp	r2, r3
 8006844:	d209      	bcs.n	800685a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006846:	4b12      	ldr	r3, [pc, #72]	; (8006890 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	4b0f      	ldr	r3, [pc, #60]	; (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3304      	adds	r3, #4
 8006850:	4619      	mov	r1, r3
 8006852:	4610      	mov	r0, r2
 8006854:	f7fe fc0f 	bl	8005076 <vListInsert>
}
 8006858:	e010      	b.n	800687c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685a:	4b0e      	ldr	r3, [pc, #56]	; (8006894 <prvAddCurrentTaskToDelayedList+0xa0>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <prvAddCurrentTaskToDelayedList+0x94>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3304      	adds	r3, #4
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f7fe fc05 	bl	8005076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800686c:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <prvAddCurrentTaskToDelayedList+0xa4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	429a      	cmp	r2, r3
 8006874:	d202      	bcs.n	800687c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006876:	4a08      	ldr	r2, [pc, #32]	; (8006898 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6013      	str	r3, [r2, #0]
}
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	20000e48 	.word	0x20000e48
 8006888:	20000970 	.word	0x20000970
 800688c:	20000e30 	.word	0x20000e30
 8006890:	20000e00 	.word	0x20000e00
 8006894:	20000dfc 	.word	0x20000dfc
 8006898:	20000e64 	.word	0x20000e64

0800689c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80068a6:	f000 facb 	bl	8006e40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80068aa:	4b1c      	ldr	r3, [pc, #112]	; (800691c <xTimerCreateTimerTask+0x80>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d021      	beq.n	80068f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80068b6:	2300      	movs	r3, #0
 80068b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80068ba:	1d3a      	adds	r2, r7, #4
 80068bc:	f107 0108 	add.w	r1, r7, #8
 80068c0:	f107 030c 	add.w	r3, r7, #12
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fe fb6b 	bl	8004fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068ca:	6879      	ldr	r1, [r7, #4]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	9202      	str	r2, [sp, #8]
 80068d2:	9301      	str	r3, [sp, #4]
 80068d4:	2302      	movs	r3, #2
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	460a      	mov	r2, r1
 80068dc:	4910      	ldr	r1, [pc, #64]	; (8006920 <xTimerCreateTimerTask+0x84>)
 80068de:	4811      	ldr	r0, [pc, #68]	; (8006924 <xTimerCreateTimerTask+0x88>)
 80068e0:	f7ff f912 	bl	8005b08 <xTaskCreateStatic>
 80068e4:	4603      	mov	r3, r0
 80068e6:	4a10      	ldr	r2, [pc, #64]	; (8006928 <xTimerCreateTimerTask+0x8c>)
 80068e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068ea:	4b0f      	ldr	r3, [pc, #60]	; (8006928 <xTimerCreateTimerTask+0x8c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068f2:	2301      	movs	r3, #1
 80068f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10a      	bne.n	8006912 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	613b      	str	r3, [r7, #16]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006912:	697b      	ldr	r3, [r7, #20]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000ea0 	.word	0x20000ea0
 8006920:	080077bc 	.word	0x080077bc
 8006924:	08006a49 	.word	0x08006a49
 8006928:	20000ea4 	.word	0x20000ea4

0800692c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08a      	sub	sp, #40	; 0x28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800693a:	2300      	movs	r3, #0
 800693c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10a      	bne.n	800695a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	f383 8811 	msr	BASEPRI, r3
 800694c:	f3bf 8f6f 	isb	sy
 8006950:	f3bf 8f4f 	dsb	sy
 8006954:	623b      	str	r3, [r7, #32]
}
 8006956:	bf00      	nop
 8006958:	e7fe      	b.n	8006958 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800695a:	4b1a      	ldr	r3, [pc, #104]	; (80069c4 <xTimerGenericCommand+0x98>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d02a      	beq.n	80069b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b05      	cmp	r3, #5
 8006972:	dc18      	bgt.n	80069a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006974:	f7ff feb2 	bl	80066dc <xTaskGetSchedulerState>
 8006978:	4603      	mov	r3, r0
 800697a:	2b02      	cmp	r3, #2
 800697c:	d109      	bne.n	8006992 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800697e:	4b11      	ldr	r3, [pc, #68]	; (80069c4 <xTimerGenericCommand+0x98>)
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	f107 0110 	add.w	r1, r7, #16
 8006986:	2300      	movs	r3, #0
 8006988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698a:	f7fe fcd9 	bl	8005340 <xQueueGenericSend>
 800698e:	6278      	str	r0, [r7, #36]	; 0x24
 8006990:	e012      	b.n	80069b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006992:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <xTimerGenericCommand+0x98>)
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	f107 0110 	add.w	r1, r7, #16
 800699a:	2300      	movs	r3, #0
 800699c:	2200      	movs	r2, #0
 800699e:	f7fe fccf 	bl	8005340 <xQueueGenericSend>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24
 80069a4:	e008      	b.n	80069b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80069a6:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <xTimerGenericCommand+0x98>)
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	f107 0110 	add.w	r1, r7, #16
 80069ae:	2300      	movs	r3, #0
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	f7fe fdc3 	bl	800553c <xQueueGenericSendFromISR>
 80069b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3728      	adds	r7, #40	; 0x28
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	20000ea0 	.word	0x20000ea0

080069c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b088      	sub	sp, #32
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d2:	4b1c      	ldr	r3, [pc, #112]	; (8006a44 <prvProcessExpiredTimer+0x7c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	68db      	ldr	r3, [r3, #12]
 80069da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	3304      	adds	r3, #4
 80069e0:	4618      	mov	r0, r3
 80069e2:	f7fe fb81 	bl	80050e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d122      	bne.n	8006a34 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	18d1      	adds	r1, r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	6978      	ldr	r0, [r7, #20]
 80069fc:	f000 f8c8 	bl	8006b90 <prvInsertTimerInActiveList>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d016      	beq.n	8006a34 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a06:	2300      	movs	r3, #0
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	6978      	ldr	r0, [r7, #20]
 8006a12:	f7ff ff8b 	bl	800692c <xTimerGenericCommand>
 8006a16:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	60fb      	str	r3, [r7, #12]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	6978      	ldr	r0, [r7, #20]
 8006a3a:	4798      	blx	r3
}
 8006a3c:	bf00      	nop
 8006a3e:	3718      	adds	r7, #24
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	20000e98 	.word	0x20000e98

08006a48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a50:	f107 0308 	add.w	r3, r7, #8
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 f857 	bl	8006b08 <prvGetNextExpireTime>
 8006a5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f803 	bl	8006a6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a66:	f000 f8d5 	bl	8006c14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a6a:	e7f1      	b.n	8006a50 <prvTimerTask+0x8>

08006a6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a76:	f7ff fa45 	bl	8005f04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a7a:	f107 0308 	add.w	r3, r7, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 f866 	bl	8006b50 <prvSampleTimeNow>
 8006a84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d130      	bne.n	8006aee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d806      	bhi.n	8006aa8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a9a:	f7ff fa41 	bl	8005f20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a9e:	68f9      	ldr	r1, [r7, #12]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff ff91 	bl	80069c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006aa6:	e024      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d008      	beq.n	8006ac0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aae:	4b13      	ldr	r3, [pc, #76]	; (8006afc <prvProcessTimerOrBlockTask+0x90>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	bf0c      	ite	eq
 8006ab8:	2301      	moveq	r3, #1
 8006aba:	2300      	movne	r3, #0
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ac0:	4b0f      	ldr	r3, [pc, #60]	; (8006b00 <prvProcessTimerOrBlockTask+0x94>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	4619      	mov	r1, r3
 8006ace:	f7fe ffe7 	bl	8005aa0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ad2:	f7ff fa25 	bl	8005f20 <xTaskResumeAll>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10a      	bne.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006adc:	4b09      	ldr	r3, [pc, #36]	; (8006b04 <prvProcessTimerOrBlockTask+0x98>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
}
 8006aec:	e001      	b.n	8006af2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006aee:	f7ff fa17 	bl	8005f20 <xTaskResumeAll>
}
 8006af2:	bf00      	nop
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000e9c 	.word	0x20000e9c
 8006b00:	20000ea0 	.word	0x20000ea0
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <prvGetNextExpireTime+0x44>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	bf0c      	ite	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	2300      	movne	r3, #0
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	461a      	mov	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d105      	bne.n	8006b3a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <prvGetNextExpireTime+0x44>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e001      	b.n	8006b3e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000e98 	.word	0x20000e98

08006b50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b58:	f7ff fa80 	bl	800605c <xTaskGetTickCount>
 8006b5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <prvSampleTimeNow+0x3c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d205      	bcs.n	8006b74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b68:	f000 f908 	bl	8006d7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b7a:	4a04      	ldr	r2, [pc, #16]	; (8006b8c <prvSampleTimeNow+0x3c>)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b80:	68fb      	ldr	r3, [r7, #12]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3710      	adds	r7, #16
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	20000ea8 	.word	0x20000ea8

08006b90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	607a      	str	r2, [r7, #4]
 8006b9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d812      	bhi.n	8006bdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	1ad2      	subs	r2, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d302      	bcc.n	8006bca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	617b      	str	r3, [r7, #20]
 8006bc8:	e01b      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bca:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <prvInsertTimerInActiveList+0x7c>)
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	4610      	mov	r0, r2
 8006bd6:	f7fe fa4e 	bl	8005076 <vListInsert>
 8006bda:	e012      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d206      	bcs.n	8006bf2 <prvInsertTimerInActiveList+0x62>
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d302      	bcc.n	8006bf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e007      	b.n	8006c02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bf2:	4b07      	ldr	r3, [pc, #28]	; (8006c10 <prvInsertTimerInActiveList+0x80>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	3304      	adds	r3, #4
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f7fe fa3a 	bl	8005076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c02:	697b      	ldr	r3, [r7, #20]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000e9c 	.word	0x20000e9c
 8006c10:	20000e98 	.word	0x20000e98

08006c14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c1a:	e09d      	b.n	8006d58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da18      	bge.n	8006c54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c22:	1d3b      	adds	r3, r7, #4
 8006c24:	3304      	adds	r3, #4
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	61fb      	str	r3, [r7, #28]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4a:	6850      	ldr	r0, [r2, #4]
 8006c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c4e:	6892      	ldr	r2, [r2, #8]
 8006c50:	4611      	mov	r1, r2
 8006c52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	db7e      	blt.n	8006d58 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	695b      	ldr	r3, [r3, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fa3c 	bl	80050e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c70:	463b      	mov	r3, r7
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff ff6c 	bl	8006b50 <prvSampleTimeNow>
 8006c78:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	d86a      	bhi.n	8006d56 <prvProcessReceivedCommands+0x142>
 8006c80:	a201      	add	r2, pc, #4	; (adr r2, 8006c88 <prvProcessReceivedCommands+0x74>)
 8006c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c86:	bf00      	nop
 8006c88:	08006cb1 	.word	0x08006cb1
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cb1 	.word	0x08006cb1
 8006c94:	08006d59 	.word	0x08006d59
 8006c98:	08006d0d 	.word	0x08006d0d
 8006c9c:	08006d45 	.word	0x08006d45
 8006ca0:	08006cb1 	.word	0x08006cb1
 8006ca4:	08006cb1 	.word	0x08006cb1
 8006ca8:	08006d59 	.word	0x08006d59
 8006cac:	08006d0d 	.word	0x08006d0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	18d1      	adds	r1, r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cbe:	f7ff ff67 	bl	8006b90 <prvInsertTimerInActiveList>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d047      	beq.n	8006d58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d13f      	bne.n	8006d58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	441a      	add	r2, r3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cea:	f7ff fe1f 	bl	800692c <xTimerGenericCommand>
 8006cee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d130      	bne.n	8006d58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	61bb      	str	r3, [r7, #24]
}
 8006d08:	bf00      	nop
 8006d0a:	e7fe      	b.n	8006d0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	617b      	str	r3, [r7, #20]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	699a      	ldr	r2, [r3, #24]
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	18d1      	adds	r1, r2, r3
 8006d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d3e:	f7ff ff27 	bl	8006b90 <prvInsertTimerInActiveList>
					break;
 8006d42:	e009      	b.n	8006d58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d104      	bne.n	8006d58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d50:	f000 fbc6 	bl	80074e0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d54:	e000      	b.n	8006d58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006d56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d58:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <prvProcessReceivedCommands+0x164>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	1d39      	adds	r1, r7, #4
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fe fc83 	bl	800566c <xQueueReceive>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f47f af57 	bne.w	8006c1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	3730      	adds	r7, #48	; 0x30
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000ea0 	.word	0x20000ea0

08006d7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d82:	e045      	b.n	8006e10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d84:	4b2c      	ldr	r3, [pc, #176]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3304      	adds	r3, #4
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe f9a3 	bl	80050e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d12e      	bne.n	8006e10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4413      	add	r3, r2
 8006dba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d90e      	bls.n	8006de2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dd0:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7fe f94b 	bl	8005076 <vListInsert>
 8006de0:	e016      	b.n	8006e10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	2100      	movs	r1, #0
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f7ff fd9d 	bl	800692c <xTimerGenericCommand>
 8006df2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10a      	bne.n	8006e10 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	603b      	str	r3, [r7, #0]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e10:	4b09      	ldr	r3, [pc, #36]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1b4      	bne.n	8006d84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <prvSwitchTimerLists+0xc0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <prvSwitchTimerLists+0xbc>)
 8006e26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e28:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <prvSwitchTimerLists+0xc0>)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	6013      	str	r3, [r2, #0]
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000e98 	.word	0x20000e98
 8006e3c:	20000e9c 	.word	0x20000e9c

08006e40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e46:	f000 f965 	bl	8007114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e4a:	4b15      	ldr	r3, [pc, #84]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d120      	bne.n	8006e94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e52:	4814      	ldr	r0, [pc, #80]	; (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e54:	f7fe f8be 	bl	8004fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e58:	4813      	ldr	r0, [pc, #76]	; (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e5a:	f7fe f8bb 	bl	8004fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e5e:	4b13      	ldr	r3, [pc, #76]	; (8006eac <prvCheckForValidListAndQueue+0x6c>)
 8006e60:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <prvCheckForValidListAndQueue+0x64>)
 8006e62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <prvCheckForValidListAndQueue+0x70>)
 8006e66:	4a10      	ldr	r2, [pc, #64]	; (8006ea8 <prvCheckForValidListAndQueue+0x68>)
 8006e68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9300      	str	r3, [sp, #0]
 8006e6e:	4b11      	ldr	r3, [pc, #68]	; (8006eb4 <prvCheckForValidListAndQueue+0x74>)
 8006e70:	4a11      	ldr	r2, [pc, #68]	; (8006eb8 <prvCheckForValidListAndQueue+0x78>)
 8006e72:	2110      	movs	r1, #16
 8006e74:	200a      	movs	r0, #10
 8006e76:	f7fe f9c9 	bl	800520c <xQueueGenericCreateStatic>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	4a08      	ldr	r2, [pc, #32]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e80:	4b07      	ldr	r3, [pc, #28]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <prvCheckForValidListAndQueue+0x60>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	490b      	ldr	r1, [pc, #44]	; (8006ebc <prvCheckForValidListAndQueue+0x7c>)
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fddc 	bl	8005a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e94:	f000 f96e 	bl	8007174 <vPortExitCritical>
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000ea0 	.word	0x20000ea0
 8006ea4:	20000e70 	.word	0x20000e70
 8006ea8:	20000e84 	.word	0x20000e84
 8006eac:	20000e98 	.word	0x20000e98
 8006eb0:	20000e9c 	.word	0x20000e9c
 8006eb4:	20000f4c 	.word	0x20000f4c
 8006eb8:	20000eac 	.word	0x20000eac
 8006ebc:	080077c4 	.word	0x080077c4

08006ec0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f023 0201 	bic.w	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ef0:	4a0c      	ldr	r2, [pc, #48]	; (8006f24 <pxPortInitialiseStack+0x64>)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b14      	subs	r3, #20
 8006efa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3b04      	subs	r3, #4
 8006f06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f06f 0202 	mvn.w	r2, #2
 8006f0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3b20      	subs	r3, #32
 8006f14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f16:	68fb      	ldr	r3, [r7, #12]
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3714      	adds	r7, #20
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	08006f29 	.word	0x08006f29

08006f28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f32:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <prvTaskExitError+0x54>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f3a:	d00a      	beq.n	8006f52 <prvTaskExitError+0x2a>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60fb      	str	r3, [r7, #12]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <prvTaskExitError+0x28>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f66:	bf00      	nop
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0fc      	beq.n	8006f68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	200000ac 	.word	0x200000ac

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <xPortStartScheduler+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <xPortStartScheduler+0x128>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xPortStartScheduler+0x12c>)
 8007018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <xPortStartScheduler+0x130>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <xPortStartScheduler+0x134>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xPortStartScheduler+0x134>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <xPortStartScheduler+0xb8>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <xPortStartScheduler+0x134>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <xPortStartScheduler+0x134>)
 8007090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xPortStartScheduler+0x134>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <xPortStartScheduler+0x134>)
 800709c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <xPortStartScheduler+0x138>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xPortStartScheduler+0x138>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <xPortStartScheduler+0x138>)
 80070b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070be:	f000 f8dd 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <xPortStartScheduler+0x13c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070c8:	f000 f8fc 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xPortStartScheduler+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <xPortStartScheduler+0x140>)
 80070d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d8:	f7ff ff66 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070dc:	f7ff f88c 	bl	80061f8 <vTaskSwitchContext>
	prvTaskExitError();
 80070e0:	f7ff ff22 	bl	8006f28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed00 	.word	0xe000ed00
 80070f4:	410fc271 	.word	0x410fc271
 80070f8:	410fc270 	.word	0x410fc270
 80070fc:	e000e400 	.word	0xe000e400
 8007100:	20000f9c 	.word	0x20000f9c
 8007104:	20000fa0 	.word	0x20000fa0
 8007108:	e000ed20 	.word	0xe000ed20
 800710c:	200000ac 	.word	0x200000ac
 8007110:	e000ef34 	.word	0xe000ef34

08007114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <vPortEnterCritical+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <vPortEnterCritical+0x58>)
 8007136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <vPortEnterCritical+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortEnterCritical+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <vPortEnterCritical+0x4c>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x4a>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	200000ac 	.word	0x200000ac
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <vPortExitCritical+0x50>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortExitCritical+0x24>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <vPortExitCritical+0x50>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <vPortExitCritical+0x50>)
 80071a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <vPortExitCritical+0x42>
 80071aa:	2300      	movs	r3, #0
 80071ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f383 8811 	msr	BASEPRI, r3
}
 80071b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	200000ac 	.word	0x200000ac
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe fffa 	bl	80061f8 <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe ff13 	bl	800607c <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <SysTick_Handler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	200000a0 	.word	0x200000a0
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d914      	bls.n	8007314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <vPortValidateInterruptPriority+0x70>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vPortValidateInterruptPriority+0x74>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20a      	bcs.n	8007314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <vPortValidateInterruptPriority+0x78>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x7c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x60>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e3f0 	.word	0xe000e3f0
 800734c:	20000f9c 	.word	0x20000f9c
 8007350:	e000ed0c 	.word	0xe000ed0c
 8007354:	20000fa0 	.word	0x20000fa0

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007364:	f7fe fdce 	bl	8005f04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007368:	4b58      	ldr	r3, [pc, #352]	; (80074cc <pvPortMalloc+0x174>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007370:	f000 f910 	bl	8007594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007374:	4b56      	ldr	r3, [pc, #344]	; (80074d0 <pvPortMalloc+0x178>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 808e 	bne.w	800749e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007388:	2208      	movs	r2, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d069      	beq.n	800749e <pvPortMalloc+0x146>
 80073ca:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <pvPortMalloc+0x17c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d864      	bhi.n	800749e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d4:	4b40      	ldr	r3, [pc, #256]	; (80074d8 <pvPortMalloc+0x180>)
 80073d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d8:	4b3f      	ldr	r3, [pc, #252]	; (80074d8 <pvPortMalloc+0x180>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073de:	e004      	b.n	80073ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <pvPortMalloc+0xa4>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073fc:	4b33      	ldr	r3, [pc, #204]	; (80074cc <pvPortMalloc+0x174>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d04b      	beq.n	800749e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2208      	movs	r2, #8
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2308      	movs	r3, #8
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d91f      	bls.n	8007468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0xf8>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	613b      	str	r3, [r7, #16]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007462:	69b8      	ldr	r0, [r7, #24]
 8007464:	f000 f8f8 	bl	8007658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007468:	4b1a      	ldr	r3, [pc, #104]	; (80074d4 <pvPortMalloc+0x17c>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <pvPortMalloc+0x17c>)
 8007474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007476:	4b17      	ldr	r3, [pc, #92]	; (80074d4 <pvPortMalloc+0x17c>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b18      	ldr	r3, [pc, #96]	; (80074dc <pvPortMalloc+0x184>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d203      	bcs.n	800748a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007482:	4b14      	ldr	r3, [pc, #80]	; (80074d4 <pvPortMalloc+0x17c>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a15      	ldr	r2, [pc, #84]	; (80074dc <pvPortMalloc+0x184>)
 8007488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <pvPortMalloc+0x178>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800749e:	f7fe fd3f 	bl	8005f20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <pvPortMalloc+0x16a>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60fb      	str	r3, [r7, #12]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <pvPortMalloc+0x168>
	return pvReturn;
 80074c2:	69fb      	ldr	r3, [r7, #28]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20001bac 	.word	0x20001bac
 80074d0:	20001bb8 	.word	0x20001bb8
 80074d4:	20001bb0 	.word	0x20001bb0
 80074d8:	20001ba4 	.word	0x20001ba4
 80074dc:	20001bb4 	.word	0x20001bb4

080074e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d048      	beq.n	8007584 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074f2:	2308      	movs	r3, #8
 80074f4:	425b      	negs	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	4b21      	ldr	r3, [pc, #132]	; (800758c <vPortFree+0xac>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <vPortFree+0x44>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <vPortFree+0x62>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b11      	ldr	r3, [pc, #68]	; (800758c <vPortFree+0xac>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d019      	beq.n	8007584 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d115      	bne.n	8007584 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <vPortFree+0xac>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	43db      	mvns	r3, r3
 8007562:	401a      	ands	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007568:	f7fe fccc 	bl	8005f04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4b07      	ldr	r3, [pc, #28]	; (8007590 <vPortFree+0xb0>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4413      	add	r3, r2
 8007576:	4a06      	ldr	r2, [pc, #24]	; (8007590 <vPortFree+0xb0>)
 8007578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f000 f86c 	bl	8007658 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007580:	f7fe fcce 	bl	8005f20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007584:	bf00      	nop
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20001bb8 	.word	0x20001bb8
 8007590:	20001bb0 	.word	0x20001bb0

08007594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800759a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800759e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075a0:	4b27      	ldr	r3, [pc, #156]	; (8007640 <prvHeapInit+0xac>)
 80075a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 0307 	and.w	r3, r3, #7
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00c      	beq.n	80075c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	3307      	adds	r3, #7
 80075b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0307 	bic.w	r3, r3, #7
 80075ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <prvHeapInit+0xac>)
 80075c4:	4413      	add	r3, r2
 80075c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075cc:	4a1d      	ldr	r2, [pc, #116]	; (8007644 <prvHeapInit+0xb0>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <prvHeapInit+0xb0>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075e0:	2208      	movs	r2, #8
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 0307 	bic.w	r3, r3, #7
 80075ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	4a15      	ldr	r2, [pc, #84]	; (8007648 <prvHeapInit+0xb4>)
 80075f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075f6:	4b14      	ldr	r3, [pc, #80]	; (8007648 <prvHeapInit+0xb4>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2200      	movs	r2, #0
 80075fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <prvHeapInit+0xb4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <prvHeapInit+0xb4>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	4a0a      	ldr	r2, [pc, #40]	; (800764c <prvHeapInit+0xb8>)
 8007622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4a09      	ldr	r2, [pc, #36]	; (8007650 <prvHeapInit+0xbc>)
 800762a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800762c:	4b09      	ldr	r3, [pc, #36]	; (8007654 <prvHeapInit+0xc0>)
 800762e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007632:	601a      	str	r2, [r3, #0]
}
 8007634:	bf00      	nop
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr
 8007640:	20000fa4 	.word	0x20000fa4
 8007644:	20001ba4 	.word	0x20001ba4
 8007648:	20001bac 	.word	0x20001bac
 800764c:	20001bb4 	.word	0x20001bb4
 8007650:	20001bb0 	.word	0x20001bb0
 8007654:	20001bb8 	.word	0x20001bb8

08007658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007660:	4b28      	ldr	r3, [pc, #160]	; (8007704 <prvInsertBlockIntoFreeList+0xac>)
 8007662:	60fb      	str	r3, [r7, #12]
 8007664:	e002      	b.n	800766c <prvInsertBlockIntoFreeList+0x14>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	429a      	cmp	r2, r3
 8007674:	d8f7      	bhi.n	8007666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	4413      	add	r3, r2
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	429a      	cmp	r2, r3
 8007686:	d108      	bne.n	800769a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685a      	ldr	r2, [r3, #4]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	441a      	add	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d118      	bne.n	80076e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681a      	ldr	r2, [r3, #0]
 80076b2:	4b15      	ldr	r3, [pc, #84]	; (8007708 <prvInsertBlockIntoFreeList+0xb0>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d00d      	beq.n	80076d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	685a      	ldr	r2, [r3, #4]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	441a      	add	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
 80076d4:	e008      	b.n	80076e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076d6:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <prvInsertBlockIntoFreeList+0xb0>)
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	e003      	b.n	80076e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d002      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f6:	bf00      	nop
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	20001ba4 	.word	0x20001ba4
 8007708:	20001bac 	.word	0x20001bac

0800770c <memset>:
 800770c:	4402      	add	r2, r0
 800770e:	4603      	mov	r3, r0
 8007710:	4293      	cmp	r3, r2
 8007712:	d100      	bne.n	8007716 <memset+0xa>
 8007714:	4770      	bx	lr
 8007716:	f803 1b01 	strb.w	r1, [r3], #1
 800771a:	e7f9      	b.n	8007710 <memset+0x4>

0800771c <__libc_init_array>:
 800771c:	b570      	push	{r4, r5, r6, lr}
 800771e:	4d0d      	ldr	r5, [pc, #52]	; (8007754 <__libc_init_array+0x38>)
 8007720:	4c0d      	ldr	r4, [pc, #52]	; (8007758 <__libc_init_array+0x3c>)
 8007722:	1b64      	subs	r4, r4, r5
 8007724:	10a4      	asrs	r4, r4, #2
 8007726:	2600      	movs	r6, #0
 8007728:	42a6      	cmp	r6, r4
 800772a:	d109      	bne.n	8007740 <__libc_init_array+0x24>
 800772c:	4d0b      	ldr	r5, [pc, #44]	; (800775c <__libc_init_array+0x40>)
 800772e:	4c0c      	ldr	r4, [pc, #48]	; (8007760 <__libc_init_array+0x44>)
 8007730:	f000 f826 	bl	8007780 <_init>
 8007734:	1b64      	subs	r4, r4, r5
 8007736:	10a4      	asrs	r4, r4, #2
 8007738:	2600      	movs	r6, #0
 800773a:	42a6      	cmp	r6, r4
 800773c:	d105      	bne.n	800774a <__libc_init_array+0x2e>
 800773e:	bd70      	pop	{r4, r5, r6, pc}
 8007740:	f855 3b04 	ldr.w	r3, [r5], #4
 8007744:	4798      	blx	r3
 8007746:	3601      	adds	r6, #1
 8007748:	e7ee      	b.n	8007728 <__libc_init_array+0xc>
 800774a:	f855 3b04 	ldr.w	r3, [r5], #4
 800774e:	4798      	blx	r3
 8007750:	3601      	adds	r6, #1
 8007752:	e7f2      	b.n	800773a <__libc_init_array+0x1e>
 8007754:	0800784c 	.word	0x0800784c
 8007758:	0800784c 	.word	0x0800784c
 800775c:	0800784c 	.word	0x0800784c
 8007760:	08007850 	.word	0x08007850

08007764 <memcpy>:
 8007764:	440a      	add	r2, r1
 8007766:	4291      	cmp	r1, r2
 8007768:	f100 33ff 	add.w	r3, r0, #4294967295
 800776c:	d100      	bne.n	8007770 <memcpy+0xc>
 800776e:	4770      	bx	lr
 8007770:	b510      	push	{r4, lr}
 8007772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007776:	f803 4f01 	strb.w	r4, [r3, #1]!
 800777a:	4291      	cmp	r1, r2
 800777c:	d1f9      	bne.n	8007772 <memcpy+0xe>
 800777e:	bd10      	pop	{r4, pc}

08007780 <_init>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

0800778c <_fini>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr
